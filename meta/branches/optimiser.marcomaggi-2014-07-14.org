* Branch purpose

  Development of the source optimiser.

* Files affected

  The source optimiser code is in "ikarus.compiler.source-optimiser.ss"; the optimiser is
  configured with command line options defined in "ikarus.main.sls".

* For every library defined by the boot image classify the relevant primitives

** (vicare system $pairs)
** (vicare system $lists)
** (vicare system $chars)
** (vicare system $strings)
** (vicare system $vectors)
** (vicare system $flonums)
** (vicare system $bignums)
** (vicare system $bytevectors)
** (vicare system $transcoders)
** (vicare system $fx)
** (vicare system $ratnums)
** (vicare system $compnums)
** (vicare system $symbols)
** (vicare system $keywords)
** (vicare system $structs)
** (vicare system $pointers)
** (vicare system $codes)
** (vicare system $tcbuckets)
** (vicare system $arg-list)
** (vicare system $stack)
** (vicare system $interrupts)
** (vicare system $io)
** (vicare system $foreign)
** (vicare system $compiler)
** (vicare system $numerics)
** (vicare system $hashtables)

** (rnrs r5rs)
** (rnrs control)
** (rnrs eval)
** (rnrs mutable-pairs)
** (rnrs mutable-strings)
** (rnrs programs)
** (rnrs syntax-case)
** (rnrs files)
** (rnrs sorting)
** (rnrs base)
** (rnrs lists)
** (rnrs io simple)
** (rnrs bytevectors)
** (rnrs unicode)
** (rnrs exceptions)
** (rnrs arithmetic bitwise)
** (rnrs arithmetic fixnums)
** (rnrs arithmetic flonums)
** (rnrs hashtables)
** (rnrs io ports)
** (rnrs enums)
** (rnrs conditions)
** (rnrs records inspection)
** (rnrs records procedural)
** (rnrs records syntactic)

** (vicare libraries)
** (vicare language-extensions)
** (vicare language-extensions posix)

** (vicare expander object-type-specs)
** (vicare expander tags)
* letrec optimiser

** Add to the waddell optimiser the code to integrate nested rhs let:

     (letrec* (bi ...
               [x (let ([lhs* rhs*] ...) body)]
               bj ...)
       body)
     ===>
     (letrec* (bi ...
               [tmp* rhs*] ...
               [lhs* tmp*] ...
               [x body]
               bj ...)
       body)

** Review the use of SEQ structures.  They should be built as:

      (begin a b c d) ==> (seq (seq (seq a b) c) d)

   not as:

      (begin a b c d) ==> (seq a (seq b (seq c d)))

