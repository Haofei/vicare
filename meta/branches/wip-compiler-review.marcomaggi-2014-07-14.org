* Branch purpose

  Total review of the compiler.

* Compiler pass: introduce unsafe primcalls

** Use table of core primitives to infer core types.

* Compiler pass: core type inference

** Rely on the core primitives table to determine the type of operands and return values.

* Compiler pass: source optimiser

** Total code review.

* Core primitive operations implementation

** Total code review.

** Splitting the big library into component libraries.

** Implement unsafe variant of FX+ and similar.

   This is  to allow  the substitution of  "fx+" and  similar primitives
   with  the  equivalent  unsafe  variant  when it  is  known  that  the
   application operands have the correct type.

   For    example:   while    "+"    already    is   substituted    with
   "$add-fixnum-fixnum"  when there  are two  fixnum operands,  "fx+" is
   left untouched because;  it is not possible to  substitute "fx+" with
   "$fx+", because  the return value  of "fx+" must  be a fixnum,  so an
   overflow check must be performed.

