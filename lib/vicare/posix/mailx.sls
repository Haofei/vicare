;;;
;;;Part of: Vicare Scheme
;;;Contents: sending mail with mailx
;;;Date: Thu Jan 22, 2015
;;;
;;;Abstract
;;;
;;;	This library defines  an API to send mail with  the locally installed program
;;;	"mailx".
;;;
;;;Copyright (C) 2015 Marco Maggi <marco.maggi-ipsu@poste.it>
;;;
;;;This program is free software: you can  redistribute it and/or modify it under the
;;;terms  of  the GNU  General  Public  License as  published  by  the Free  Software
;;;Foundation,  either version  3  of the  License,  or (at  your  option) any  later
;;;version.
;;;
;;;This program is  distributed in the hope  that it will be useful,  but WITHOUT ANY
;;;WARRANTY; without  even the implied warranty  of MERCHANTABILITY or FITNESS  FOR A
;;;PARTICULAR PURPOSE.  See the GNU General Public License for more details.
;;;
;;;You should have received a copy of  the GNU General Public License along with this
;;;program.  If not, see <http://www.gnu.org/licenses/>.
;;;


#!vicare
(library (vicare posix mailx)
  (export mailx)
  (import (vicare)
    (prefix (vicare posix) px.))


(define* (mailx {message.bv bytevector?})
  (let-values
      (((child-stdin          parent->child-stdin) (px.pipe))
       ((child-stdout->parent child-stdout)        (px.pipe))
       ((child-stderr->parent child-stderr)        (px.pipe)))
    (px.fork
      (lambda (child-pid) ;here we are in the parent
	(receive (stdin-port stdout-port stderr-port)
	    (%prepare-parent-binary-input/output-ports parent->child-stdin child-stdout->parent child-stderr->parent)
	  ;;Write message.
	  (unwind-protect
	      (begin
		(put-bytevector stdin-port message.bv)
		(flush-output-port stdin-port))
	    (close-output-port stdin-port))
	  (unwind-protect
	      (begin
		;;Wait until the child exits.
		(let ((status (px.waitpid child-pid 0)))
		  (if (and (px.WIFEXITED status)
			   (zero? (px.WEXITSTATUS status)))
		      ;;Read  the output  from "mailx"  generated by  the "-v"  flag.
		      ;;Mailx writes to its stdout and its stderr.
		      (values (%read-from-child stdout-port)
			      (%read-from-child stderr-port))
		    (error __who__
		      "mailx process exited abnormally"
		      status))))
	    (close-output-port stdin-port)
	    (close-input-port stdout-port)
	    (close-input-port stderr-port))))
      (lambda ()	;here we are in the child
	(guard (E (else
		   (print-condition E)
		   (exit 1)))
	  (%prepare-child-file-descriptors child-stdin child-stdout child-stderr)
	  (px.setenv "MAILRC" "/dev/null")
	  #;(px.execvp "sendmail" '("sendmail" "-t" "-i" "-v"))
	  (px.execvp "mailx" '("mailx" "-t" "-n" "-v")))))))


;;;; ports and file descriptors

(define (%prepare-child-file-descriptors child-stdin child-stdout child-stderr)
  ;;Setup stdin.
  (begin
    (close-input-port (console-input-port))
    (px.dup2  child-stdin 0)
    (px.close child-stdin))
  ;;Setup stdout.
  (begin
    (close-output-port (console-output-port))
    (px.dup2  child-stdout 1)
    (px.close child-stdout))
  ;;Setup stderr.
  (begin
    (close-output-port (console-error-port))
    (px.dup2  child-stderr 2)
    (px.close child-stderr)))

(define (%prepare-child-binary-input/output-ports)
  ;;To be called  in the child, right after  %PREPARE-CHILD-FILE-DESCRIPTORS to build
  ;;binary  input and  output ports  from the  standard file  descriptors.  Return  3
  ;;values:
  ;;
  ;;1. Binary input port reading from the standard file descriptor 0.
  ;;
  ;;2. Binary input port writing to the standard file descriptor 1.
  ;;
  ;;3. Binary input port writing to the standard file descriptor 2.
  ;;
  (values
   (make-binary-file-descriptor-input-port  0 "*stdin*")
   (make-binary-file-descriptor-output-port 1 "*stdout*")
   (make-binary-file-descriptor-output-port 2 "*stderr*")))

(define (%prepare-child-textual-input/output-ports)
  ;;To be called  in the child, right after  %PREPARE-CHILD-FILE-DESCRIPTORS to build
  ;;textual input  and output  ports from  the standard  file descriptors.   Return 3
  ;;values:
  ;;
  ;;1. Binary input port reading from the standard file descriptor 0.
  ;;
  ;;2. Binary input port writing to the standard file descriptor 1.
  ;;
  ;;3. Binary input port writing to the standard file descriptor 2.
  ;;
  (values
   (make-textual-file-descriptor-input-port  0 "*stdin*"  (native-transcoder))
   (make-textual-file-descriptor-output-port 1 "*stdout*" (native-transcoder))
   (make-textual-file-descriptor-output-port 2 "*stderr*" (native-transcoder))))

;;; --------------------------------------------------------------------

(define (%prepare-parent-binary-input/output-ports parent->child-stdin child-stdout->parent child-stderr->parent)
  ;;To be  called in the  parent to build  Scheme input/output ports  around standard
  ;;file descriptors for the child process.  Return 3 values:
  ;;
  ;;1. Binary output port  that writes in the stdin of the  child.  Closing this port
  ;;will also close the underlying file descriptor.
  ;;
  ;;2. Binary input port that reads from  the stdout of the child.  Closing this port
  ;;will also close the underlying file descriptor.
  ;;
  ;;3. Binary input port that reads from  the stderr of the child.  Closing this port
  ;;will also close the underlying file descriptor.
  ;;
  (values
   ;;Output port that writes in the stdin of the child.
   (make-binary-file-descriptor-output-port parent->child-stdin  "*child-stdin*")
   ;;Input port that reads from the stdout of the child.
   (make-binary-file-descriptor-input-port  child-stdout->parent "*child-stdout*")
   ;;Input port that reads from the stderr of the child.
   (make-binary-file-descriptor-input-port  child-stderr->parent "*child-stderr*")))

(define (%prepare-parent-input/output-textual-ports parent->child-stdin child-stdout->parent child-stderr->parent)
  ;;To be  called in the  parent to build  Scheme input/output ports  around standard
  ;;file descriptors for the child process.  Return 3 values:
  ;;
  ;;1. Textual output port that writes in  the stdin of the child.  Closing this port
  ;;will also close the underlying file descriptor.
  ;;
  ;;2. Textual input port that reads from the stdout of the child.  Closing this port
  ;;will also close the underlying file descriptor.
  ;;
  ;;3. Textual input port that reads from the stderr of the child.  Closing this port
  ;;will also close the underlying file descriptor.
  ;;
  (values
   ;;Output port that writes in the stdin of the child.
   (make-textual-file-descriptor-output-port parent->child-stdin  "*child-stdin*"  (native-transcoder))
   ;;Input port that reads from the stdout of the child.
   (make-textual-file-descriptor-input-port  child-stdout->parent "*child-stdout*" (native-transcoder))
   ;;Input port that reads from the stderr of the child.
   (make-textual-file-descriptor-input-port  child-stderr->parent "*child-stderr*" (native-transcoder))))

;;; --------------------------------------------------------------------

(define (%read-from-child child-port)
  (port-set-non-blocking-mode! child-port)
  (receive (buffer-port extract)
      (open-bytevector-output-port)
    (let next-chunk ()
      (let ((buf (get-bytevector-some child-port)))
	(cond ((or (eof-object? buf)
		   (would-block-object? buf))
	       (utf8->string (extract)))
	      (else
	       (put-bytevector buffer-port buf)
	       (next-chunk)))))))


;;;; done

#| end of library |# )

;;; end of file
;; Local Variables:
;; mode: vicare
;; coding: utf-8
;; eval: (put 'px.fork 'scheme-indent-function 0)
;; End:
