@node net addresses
@section Network--related libraries


@menu
* net addresses ip::            Generic @ip{} addresses.
* net addresses ipv4::          IPv4 address objects.
* net addresses ipv6::          IPv6 address objects.
* net addresses uri::           Uniform Resource Identifier objects.
@end menu

@c page
@node net addresses ip
@subsection Generic @ip{} addresses


@cindex @library{nausicaa net addresses ip}, library
@cindex Library @library{nausicaa net addresses ip}


The library @library{nausicaa net addresses ip} exports facilities to
handle generic @ip{} addresses specifications.

@menu
* net addresses ip methods::    Multimethods for @ip{} address objects.
* net addresses ip base::       Base @ip{} address objects.
* net addresses ip numeric::    Numeric @ip{} address objects.
* net addresses ip name::       Registered name @ip{} address objects.
* net addresses ip future::     Future versions of @ip{} address
                                objects.
* net addresses ip misc::       Miscellaneous definitions.
@end menu

@c page
@node net addresses ip methods
@subsubsection Multimethods for @ip{} address objects


The following bindings are exported by the library @library{nausicaa net
addresses ip}.


@deffn Multimethod ip-address->string @var{ip-address}
Given as argument an object type subclassed from @class{ip-address}
build and return a string representation as defined by @rfc{} 3986;
every character in the string can be directly converted to an @ascii{}
encoded character, some sequences of characters may represent a
percent--encoded character.

Notice that some subclasses of @class{ip-address} have string
representation that is @strong{invalid} as percent--encoded string as
defined by @rfc{} 3986.
@end deffn


@deffn Multimethod ip-address->bytevector @var{ip-address}
Given as argument an object type subclassed from @class{ip-address}
build and return a bytevector representation as defined by @rfc{} 3986;
every octet in the bytevector represents an @ascii{} encoded character,
some sequences of octets may represent a percent--encoded character.

Notice that some subclasses of @class{ip-address} have bytevector
representation that is @strong{invalid} as percent--encoded bytevector
as defined by @rfc{} 3986.
@end deffn


@deffn Multimethod ip-address->bignum @var{ip-address}
Given as argument an object type subclassed from
@class{ip-numeric-address} build and return an exact integer
representation.
@end deffn

@c page
@node net addresses ip base
@subsubsection Generic @ip{} address objects


The following bindings are exported by the library @library{nausicaa net
addresses ip}.


@deftp {Abstract Class} @aclass{ip-address}
Base class for all the address types representing @ip{} addresses.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Super constructor} @aclass{ip-address} constructor
@defopx {Super constructor} @aclass{ip-address} constructor @var{option} @dots{}
Supertype constructor for types derived from @class{ip-address}.  When
called with some arguments it supports the following keyword values:

@table @asis
@item @keyword{string-rep} @var{obj}
The argument @var{obj} must be @false{} or a string object
representation of the address as defined by @rfc{} 3986.

@item @keyword{bytevector-rep} @var{obj}
The argument @var{obj} must be @false{} or a bytevector object
representation of the address as defined by @rfc{} 3986.
@end table
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable virtual field} @aclass{ip-address} @aclass{ascii-string} string
String object representation of the address.  It must represent the
address string as defined by @rfc{} 3986; every character in the string
can be directly converted to an @ascii{} encoded character, some
sequences of characters may represent a percent--encoded character.

The value of this field is set by the constructor with the keyword
@keyword{string-rep} or computed by the multimethod
@func{ip-address->string} and memoized in the object.

Notice that some subclasses of @class{ip-address} have string
representation that is @strong{invalid} as percent--encoded string as
defined by @rfc{} 3986.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ip-address} @aclass{ascii-bytevector} bytevector
Bytevector object representation of the address as defined by @rfc{}
3986; every octet in the bytevector represents an @ascii{} encoded
character, some sequences of octets may represent a percent--encoded
character.

The value of this field is set by the constructor with the keyword
@keyword{bytevector-rep} or computed by the multimethod
@func{ip-address->bytevector} and memoized in the object.

Notice that some subclasses of @class{ip-address} have bytevector
representation that is @strong{invalid} as percent--encoded bytevector
as defined by @rfc{} 3986.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Multimethod implementations


@deffn Multimethod ip-address->bytevector (@var{addr} @aclass{ip-address})
Build and return a bytevector representation of the address from its
string representation; raise an error if a string representation cannot
be built.  Expect all the characters in the field @code{string} of
@var{addr} to be directly convertible to the corresponding @ascii{}
encoding.
@end deffn

@c page
@node net addresses ip numeric
@subsubsection Numeric @ip{} address objects


The following bindings are exported by the library @library{nausicaa net
addresses ip}.


@deftp {Abstract Class} @aclass{ip-numeric-address}
Base class for all the address types representing numeric @ip{}
addresses.  It is derived from @class{ip-address}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Super constructor} @aclass{ip-numeric-address} constructor
@defopx {Super constructor} @aclass{ip-numeric-address} constructor @var{option} @dots{}
Supertype constructor for types derived from @class{ip-numeric-address}.
When called with some arguments it supports the following keyword
values:

@table @asis
@item @keyword{bignum-rep} @var{obj}
The argument @var{obj} must be @false{} or an exact integer
representation of the address.
@end table

@noindent
all the other values are handed to the constructor of
@class{ip-address}.
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable virtual field} @aclass{ip-numeric-address} @aclass{exact-integer} bignum
Exact integer object representation of the address.  The value of this
field is set by the constructor or computed by the multimethod
@func{ip-address->bignum} and it is memoized in the object.
@end deftypecv

@c page
@node net addresses ip name
@subsubsection Registered name @ip{} address objects


The following bindings are exported by the library @library{nausicaa net
addresses ip}.


@deftp {Abstract Class} @aclass{reg-name-address}
Type of @ip{} address representations as ``registered name''.  It is
derived from @class{ip-address}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Common constructor} @aclass{reg-name-address} constructor @var{address}
Common constructor for objects of type @class{reg-name-address}.  The
argument @var{address} must be a bytevector object representation of the
address; it must represent a string in percent--encoding as defined by
@rfc{} 3986.
@end defop


@defop Maker @aclass{reg-name-address} @aclass{reg-name-address} (@meta{address})
Build and return a new instance of @class{reg-name-address} using the
common constructor.
@end defop

@c ------------------------------------------------------------

@subsubheading Multimethod implementations


@deffn Multimethod ip-address->string (@var{addr} @aclass{reg-name-address})
Objects of type @class{reg-name-address} have a percent--encoded
bytevector representation set by the constructor; this method uses that
to build a string representation.

Build and return a string representation of the address from its
percent--encoded representation; the returned object still represents a
percent--encoded string.
@end deffn

@c page
@node net addresses ip future
@subsubsection Future versions of @ip{} address objects


@rfc{} 3986 defines a syntax to specify future versions of address
literals, beyond the one for registered names and numeric IPv4 and IPv6;
the class @class{ipvfuture-address} is a container to represent such
address representations.

@example
#!vicare
(import (nausicaa)
  (prefix (nausicaa net addresses ip) ip.))

(ip.<ipvfuture-address> O
  (<> (10 '#ve(ascii "ci%3Fa%3Do"))))

(O string)
@result{} "[vA.ci%3Fa%3Do]"

(O bytevector)
@result{} #ve(ascii "[vA.ci%3Fa%3Do]")

(O version-flag)        @result{} 10
(O literal)             @result{} #ve(ascii "ci%3Fa%3Do")
@end example

The following bindings are exported by the library @library{nausicaa net
addresses ip}.


@deftp {Abstract Class} @aclass{ipvfuture-address}
Type for future versions of @ip{} address literals.  It is derived from
@class{ip-address}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Common constructor} @aclass{ipvfuture-address} constructor @var{version-flag} @var{address}
Common constructor for objects of type @class{ipvfuture-address}.
@var{version-flag} must be a fixnum in the range @math{[0, 15]}
representing the version number of the literal format, according to
@rfc{} 3986.  @var{address} must be a bytevector object representation
of the address as defined by @rfc{} 3986.
@end defop


@defop Maker @aclass{ipvfuture-address} @aclass{ipvfuture-address} (@meta{version-flag} @meta{address})
Build and return a new instance of @class{ipvfuture-address} using the
common constructor.
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable field} @aclass{ipvfuture-address} @aclass{ipvfuture-version-flag} version-flag
A fixnum in the range @math{[0, 15]} representing the version of the
literal format, according to @rfc{} 3986.
@end deftypecv


@deftypecv {Immutable field} @aclass{ipvfuture-address} @aclass{ascii-bytevector} literal
A bytevector object representation of the address literal as defined by
@rfc{} 3986.  Every octet represents a character in @ascii{} encoding,
some sequences of octets may represent a percent--encoded character.

Notice that the bytevector representation of the literal is, in general,
@strong{invalid} as percent--encoded bytevector as defined by @rfc{}
3986.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Multimethod implementations


@deffn Multimethod ip-address->string (@var{addr} @aclass{ipvfuture-address})
Build and return a string representation of the address in the format
specified for @uri{}s by @rfc{} 3986.  In general, the returned object
is @strong{not} a valid percent--encoded string.
@end deffn


@deffn Multimethod ip-address->bytevector (@var{addr} @aclass{ipvfuture-address})
Build and return a bytevector representation of the address in the
format specified for @uri{}s by @rfc{} 3986.  In general, the returned
object is @strong{not} a valid percent--encoded bytevector.
@end deffn

@c page
@node net addresses ip misc
@subsubsection Miscellaneous definitions


The following bindings are exported by the library @library{nausicaa net
addresses ip}.


@deftp Label @aclass{ipvfuture-version-flag}
Type of exact integers representing version flags for future
representations of @ip{} addresses.  It is derived from @class{fixnum}.
The version flag must be in the range @math{[0, 15]}.
@end deftp


@defun make-host-object (@var{type} @aclass{symbol}) (@var{ascii} @aclass{bytevector}) @var{data}
Build and return a new instance of specialised object of class
@class{ip-address} representing the host component of a @uri{}.  The
possible classes of the returned object are: @class{reg-name-address},
@class{ipv4-address}, @class{ipv6-address}, @class{ipvfuture-address}.

@var{type} must be a symbol among: @code{reg-name}, @code{ipv4-address},
@code{ipv6-address}, @code{ipvfuture}.

@var{ascii} must be a bytevector representing the @ascii{}
representation of the host component.

@var{data} must be auxiliary data representing the host component:

@itemize
@item
For @code{reg-name}: @var{data} is undefined and unused.

@item
For @code{ipv4-address}: @var{data} must be a vector of @math{4} exact
integers representing the address components.

@item
For @code{ipv6-address}: @var{data} must be a vector of @math{8} exact
integers representing the address components.

@item
For @code{ipvfuture}: @var{data} must be an exact integer representing
the version number of the @ip{} address literal representation.
@end itemize

The arguments are modeled after the @math{3} return values of
@func{parse-host} from the library @library{nausicaa parser-tools uri}.
@end defun

@c page
@node net addresses ipv4
@subsection Ipv4 address objects


@cindex @library{nausicaa net addresses ip}, library
@cindex Library @library{nausicaa net addresses ip}


The library @library{nausicaa net addresses ip} exports utilities to
handle IPv4 addresses specifications, according to @rfc{} 5735.  To
parse the string representation of IPv4 addresses we can use the library
@library{nausicaa parser-tools ipv4-addresses}.

@menu
* net addresses ipv4 address::  IPv4 address objects class.
* net addresses ipv4 prefix::   IPv4 address prefix objects class.
* net addresses ipv4 aux::      IPv4 address auxiliary classes.
@end menu

@c page
@node net addresses ipv4 address
@subsubsection IPv4 address objects class


The following bindings are exported by the library @library{nausicaa net
addresses ip}.


@deftp Class @aclass{ipv4-address}
Represents an IPv4 address.  It is derived from
@class{ip-numeric-address} as defined by @library{nausicaa net addresses
ip}, @ref{net addresses ip numeric, Numeric @ip{} address object}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Common constructor} @aclass{ipv4-address} constructor @var{numbers}
@defopx {Common constructor} @aclass{ipv4-address} constructor @var{third} @var{second} @var{first} @var{zeroth}
Build and return a new object of type @class{ipv4-address}.  When
applied to a single argument: @var{numbers} must be a vector of @math{4}
fixnums in the range @math{[0, 255]}.  When applied to @math{4}
arguments: each one must be a fixnum in the range @math{[0, 255]}.
@end defop


@defop Maker @aclass{ipv4-address} @aclass{ipv4-address} (@meta{numbers})
@defopx Maker @aclass{ipv4-address} @aclass{ipv4-address} (@meta{third} @meta{second} @meta{first} @meta{zeroth})
Build and return a new object of type @class{ipv4-address} using the
common constructor.

@example
(<ipv4-address> O
  (<> ((parse-ipv4-address-only "1.2.3.4"))))

(list (O third) (O second) (O first) (O zeroth))
@result{} (1 2 3 4)
@end example
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable field} @aclass{ipv4-address} @aclass{ipv4-address-fixnum} zeroth
@deftypecvx {Immutable field} @aclass{ipv4-address} @aclass{ipv4-address-fixnum} first
@deftypecvx {Immutable field} @aclass{ipv4-address} @aclass{ipv4-address-fixnum} second
@deftypecvx {Immutable field} @aclass{ipv4-address} @aclass{ipv4-address-fixnum} third
The numeric components of the address, each representing @math{8} bits.
@code{zeroth} is the rightmost component, @code{first} is the second
from the right, etc.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} private?
True if the address' prefix is @code{10.0.0.0/8} or @code{172.16.0.0/12}
or @code{192.168.0.0/16}.  See Section 3 ``Global and Other Specialized
Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} loopback?
True if the address' prefix is @code{127.0.0.0/8}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} localhost?
True if the address is @code{127.0.0.1}.  See Section 3 ``Global and
Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} link-local?
True if the address' prefix is @code{169.254.0.0/16}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} reserved?
True if the address' prefix is @code{192.0.0.0/24} or
@code{240.0.0.0/4}.  See Section 3 ``Global and Other Specialized
Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} test-net-1?
True if the address' prefix is @code{192.0.2.0/24}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} six-to-four-relay-anycast?
True if the address' prefix is @code{192.88.99.0/24}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} benchmark-tests?
True if the address' prefix is @code{198.18.0.0/15}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} test-net-2?
True if the address' prefix is @code{198.51.100.0/24}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} test-net-3?
True if the address' prefix is @code{203.0.113.0/24}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} multicast?
True if the address' prefix is @code{224.0.0.0/4}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} limited-broadcast?
True if the address prefix is @code{255.255.255.255}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Multimethod implementations


@deffn Multimethod ip-address->string (@var{addr} @aclass{ipv4-address})
Build and return a string representation of the address in the format
specified for @uri{}s by @rfc{} 3986.
@end deffn


@deffn Multimethod ip-address->bytevector (@var{addr} @aclass{ipv4-address})
Build and return a bytevector representation of the address in the
format specified for @uri{}s by @rfc{} 3986.
@end deffn


@deffn Multimethod ip-address->bignum (@var{addr} @aclass{ipv4-address})
Build and return an exact integer representation of the address.
@end deffn

@c page
@node net addresses ipv4 prefix
@subsubsection IPv4 address prefix objects class


The following bindings are exported by the library @library{nausicaa net
addresses ip}.


@deftp Class @aclass{ipv4-address-prefix}
Represents an IPv4 address prefix.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Common constructor} @aclass{ipv4-address-prefix} constructor @var{prefix-length} @var{numbers}
@defopx {Common constructor} @aclass{ipv4-address-prefix} constructor @var{prefix-length} @var{third} @var{second} @var{first} @var{zeroth}
Build and return a new object of type @class{ipv4-address-prefix}.

When called with 2 arguments: @var{prefix-length} must be a
non--negative fixnum specifying how many of the leftmost contiguous bits
of the address comprise the prefix; @var{numbers} must be a vector of
@math{4} fixnums in the range @math{[0, 255]}; .

When called with 5 arguments: @var{prefix-length} must be a
non--negative fixnum specifying how many of the leftmost contiguous bits
of the address comprise the prefix; each of the other arguments must be
a fixnum in the range @math{[0, 255]}.
@end defop


@defop Maker @aclass{ipv4-address-prefix} @aclass{ipv4-address-prefix} (@meta{prefix-length} @meta{numbers})
@defopx Maker @aclass{ipv4-address-prefix} @aclass{ipv4-address-prefix} (@meta{prefix-length} @meta{third} @meta{second} @meta{first} @meta{zeroth})
Build and return a new object of type @class{ipv4-address-prefix} using
the common constructor.

@example
(<ipv4-address-prefix> O
  (receive (numbers len)
      (parse-ipv4-address-prefix "1.2.3.4/8")
    (<ipv4-address-prefix> (len numbers))))

(list (O third) (O second) (O first) (O zeroth))
@result{} (1 2 3 4)

(O prefix-length)
@result{} 8

(O string)
@result{} "1.2.3.4/8"
@end example
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable field} @aclass{ipv4-address-prefix} @aclass{ipv4-address-fixnum} zeroth
@deftypecvx {Immutable field} @aclass{ipv4-address-prefix} @aclass{ipv4-address-fixnum} first
@deftypecvx {Immutable field} @aclass{ipv4-address-prefix} @aclass{ipv4-address-fixnum} second
@deftypecvx {Immutable field} @aclass{ipv4-address-prefix} @aclass{ipv4-address-fixnum} third
The numeric components of the address prefix, each representing @math{8}
bits.  @code{zeroth} is the rightmost component, @code{first} is the
second from the right, etc.
@end deftypecv


@deftypecv {Immutable Field} @aclass{ipv4-address-prefix} @aclass{ipv4-address-prefix-length} prefix-length
A fixnum specifying how many of the leftmost contiguous bits of the
address comprise the prefix.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address-prefix} @aclass{string} string
The string representation of the address prefix.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address-prefix} @aclass{ascii-bytevector} bytevector
The bytevector representation of the address prefix, in @ascii{}
encoding.
@end deftypecv

@c page
@node net addresses ipv4 aux
@subsubsection IPv4 address auxiliary classes


The following bindings are exported by the library @library{nausicaa net
addresses ipv4}.


@deftp Label @aclass{ipv4-address-fixnum}
Label type whose predicate tests that the object is a non--negative
fixnum in the range @math{[0, 255]}.  It is derived from
@class{nonnegative-fixnum} as defined by @library{nausicaa language
builtins}, @ref{builtins numbers fixnum, Fixnum number objects}.
@end deftp


@deftp Label @aclass{vector-of-ipv4-address-fixnums}
Label type whose predicate tests that the object is a vector of @math{4}
items all being of type @class{ipv4-address-fixnum}.  It is derived from
@class{vector} as defined by @library{nausicaa language builtins},
@ref{builtins vectors, Vector type}.
@end deftp


@deftp Label @aclass{ipv4-address-prefix-length}
Label type whose predicate tests that the object is a non--negative
fixnum in the range @math{[0, 32]}.  It is derived from
@class{nonnegative-fixnum} as defined by @library{nausicaa language
builtins}, @ref{builtins numbers fixnum, Fixnum number objects}.
@end deftp

@c page
@node net addresses ipv6
@subsection IPv6 address objects


@cindex @library{nausicaa net addresses ip}, library
@cindex Library @library{nausicaa net addresses ip}


The library @library{nausicaa net addresses ip} exports utilities to
handle IPv6 addresses specifications, according to @rfc{} 4291.  To
parse the string representation of IPv4 addresses we can use the library
@library{nausicaa parser-tools ipv6-addresses}.

@menu
* net addresses ipv6 address::  IPv6 address objects class.
* net addresses ipv6 prefix::   IPv6 address prefix objects class.
* net addresses ipv6 aux::      IPv6 address auxiliary classes.
@end menu

@c page
@node net addresses ipv6 address
@subsubsection IPv6 address objects class


The following bindings are exported by the @library{nausicaa net
addresses ip} library.


@deftp Class @aclass{ipv6-address}
Represents an IPv6 address.  It is derived from
@class{ip-numeric-address} as defined by @library{nausicaa net addresses
ip}, @ref{net addresses ip numeric, Numeric @ip{} address object}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Common constructor} @aclass{ipv6-address} constructor @var{numbers}
@defopx {Common constructor} @aclass{ipv6-address} constructor @var{seventh} @var{sixth} @var{fifth} @var{fourth} @var{third} @var{second} @var{first} @var{zeroth}
Build and return a new object of type @class{ipv6-address}.  When
applied to a single argument: @var{numbers} must be a vector of @math{8}
fixnums in the range @code{[0, #xFFFF]} representing the address
components.  When applied to @math{8} arguments: each must be a fixnum
in the range @code{[0, #xFFFF]} representing an address component.
@end defop


@defop Maker @aclass{ipv6-address} @aclass{ipv6-address} (@meta{numbers})
@defopx Maker @aclass{ipv6-address} @aclass{ipv6-address} (@meta{seventh} @meta{sixth} @meta{fifth} @meta{fourth} @meta{third} @meta{second} @meta{first} @meta{zeroth})
Build and return a new object of type @class{ipv6-address} using the
common constructor.

@example
(<ipv6-address> O
  (<> (1 2 3 4 5 6 7 8)))

(list (O third) (O second) (O first) (O zeroth))
@result{} (5 6 7 8)
@end example
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} zeroth
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} first
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} second
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} third
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} fourth
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} fifth
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} sixth
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} seventh
The numeric components of the address, each representing @math{16} bits.
@code{zeroth} is the rightmost component, @code{first} is the second
from the right, etc.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv6-address} @aclass{boolean} unspecified?
@deftypecvx {Immutable virtual field} @aclass{ipv6-address} @aclass{boolean} loopback?
@deftypecvx {Immutable virtual field} @aclass{ipv6-address} @aclass{boolean} multicast?
@deftypecvx {Immutable virtual field} @aclass{ipv6-address} @aclass{boolean} link-local-unicast?
@deftypecvx {Immutable virtual field} @aclass{ipv6-address} @aclass{boolean} global-unicast?
True if the address has type, respectively: unspecified, loopback,
multicast, link--local unicast, global unicast.  See Section 2.4
``Address Type Identification'' of @rfc{} 4291.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Multimethod implementations


@deffn Multimethod ip-address->string (@var{addr} @aclass{ipv6-address})
Build and return a string representation of the address in the format
specified for @uri{}s by @rfc{} 3986.
@end deffn


@deffn Multimethod ip-address->bytevector (@var{addr} @aclass{ipv6-address})
Build and return a bytevector representation of the address in the
format specified for @uri{}s by @rfc{} 3986.
@end deffn


@deffn Multimethod ip-address->bignum (@var{addr} @aclass{ipv6-address})
Build and return an exact integer representation of the address.
@end deffn

@c page
@node net addresses ipv6 prefix
@subsubsection IPv6 address prefix objects class


The following bindings are exported by the @library{nausicaa net
addresses ip} library.


@deftp Class @aclass{ipv6-address-prefix}
Represents an IPv6 address prefix.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Common constructor} @aclass{ipv6-address-prefix} constructor @var{prefix-length} @var{numbers}
@defopx {Common constructor} @aclass{ipv6-address-prefix} constructor @var{prefix-length} @var{seventh} @var{sixth} @var{fifth} @var{fourth} @var{third} @var{second} @var{first} @var{zeroth}
Build and return a new object of type @class{ipv6-address-prefix}.

When called with two arguments: @var{prefix-length} must be a
non--negative fixnum specifying how many of the leftmost contiguous bits
of the address comprise the prefix; @var{numbers} must be a vector of
@math{8} fixnums in the range @code{[0, #xFFFF]} representing the
address components.

When called with 9 arguments: @var{prefix-length} must be a
non--negative fixnum specifying how many of the leftmost contiguous bits
of the address comprise the prefix; each of the other arguments must be
a fixnum in the range @code{[0, #xFFFF]} representing an address
component.
@end defop


@defop Maker @aclass{ipv6-address-prefix} @aclass{ipv6-address-prefix} (@meta{prefix-length} @meta{numbers})
@defopx Maker @aclass{ipv6-address-prefix} @aclass{ipv6-address} (@meta{prefix-length} @meta{seventh} @meta{sixth} @meta{fifth} @meta{fourth} @meta{third} @meta{second} @meta{first} @meta{zeroth})
Build and return a new object of type @class{ipv6-address-prefix} using
the common constructor.

@example
(<ipv6-address-prefix> O
  (<> (10 '#(1 2 3 4 5 6 7 8))))

(list (O third) (O second) (O first) (O zeroth))
@result{} (5 6 7 8)

(O prefix-length)
@result{} 10

(O string)
@result{} "1:2:3:4:0:0:0:0/50"
@end example
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable field} @aclass{ipv6-address-prefix} @aclass{ipv6-address-prefix-length} prefix-length
A number specifying how many of the leftmost contiguous bits of the
address comprise the prefix.
@end deftypecv


@deftypecv {Immutable field} @aclass{ipv6-address-prefix} @aclass{ipv6-address-fixnum} zeroth
@deftypecvx {Immutable field} @aclass{ipv6-address-prefix} @aclass{ipv6-address-fixnum} first
@deftypecvx {Immutable field} @aclass{ipv6-address-prefix} @aclass{ipv6-address-fixnum} second
@deftypecvx {Immutable field} @aclass{ipv6-address-prefix} @aclass{ipv6-address-fixnum} third
@deftypecvx {Immutable field} @aclass{ipv6-address-prefix} @aclass{ipv6-address-fixnum} fourth
@deftypecvx {Immutable field} @aclass{ipv6-address-prefix} @aclass{ipv6-address-fixnum} fifth
@deftypecvx {Immutable field} @aclass{ipv6-address-prefix} @aclass{ipv6-address-fixnum} sixth
@deftypecvx {Immutable field} @aclass{ipv6-address-prefix} @aclass{ipv6-address-fixnum} seventh
The numeric components of the address prefix, each representing
@math{16} bits.  @code{zeroth} is the rightmost component, @code{first}
is the second from the right, etc.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv6-address-prefix} @aclass{string} string
The string representation of the address prefix.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv6-address-prefix} @aclass{ascii-bytevector} bytevector
The bytevector representation of the address prefix, in @ascii{}
encoding.
@end deftypecv

@c page
@node net addresses ipv6 aux
@subsubsection IPv6 address auxiliary classes


The following bindings are exported by the library @library{nausicaa net
addresses ip}.


@deftp Label @aclass{ipv6-address-fixnum}
Label type whose predicate tests that the object is a non--negative
fixnum in the range @code{[0, #xFFFF]}.  It is derived from
@class{nonnegative-fixnum} as defined by @library{nausicaa language
builtins}, @ref{builtins numbers fixnum, Fixnum number objects}.
@end deftp


@deftp Label @aclass{vector-of-ipv6-address-fixnums}
Label type whose predicate tests that the object is a vector of @math{8}
items all being of type @class{ipv6-address-fixnum}.  It is derived from
@class{vector} as defined by @library{nausicaa language builtins},
@ref{builtins vectors, Vector type}.
@end deftp


@deftp Label @aclass{ipv6-address-prefix-length}
Label type whose predicate tests that the object is a non--negative
fixnum in the range @math{[0, 128]}.  It is derived from
@class{nonnegative-fixnum} as defined by @library{nausicaa language
builtins}, @ref{builtins numbers fixnum, Fixnum number objects}.
@end deftp

@c page
@node net addresses uri
@subsection Uniform Resource Identifier objects


@cindex @library{nausicaa net addresses uri}, library
@cindex Library @library{nausicaa net addresses uri}


The library @library{nausicaa net addresses uri} exports utilities to
handle Uniform Reource Identifiers (@uri{}) specifications, according to
@rfc{} 3986.  To parse the string representation of @uri{}s we can use
the library @library{nausicaa parser-tools uri}.

The @oopp{} @api{} to @uri{} parsing and producing is really basic; this
is because advanced handling of @uri{}s should be merged with
requirements of specific @uri{} schemes, like @code{http:} and
@code{file:}.

@menu
* net addresses uri scheme::    @uri{} scheme objects.
* net addresses uri userinfo::  @uri{} userinfo objects.
* net addresses uri host::      @uri{} host objects.
* net addresses uri uri::       Uniform Resource Identifiers objects.
* net addresses uri ref::       Relative references objects.
@end menu

@c page
@node net addresses uri scheme
@subsubsection @uri{} scheme objects


The following bindings are exported by the @library{nausicaa net
addresses uri} library.


@deftp Label @aclass{scheme}
Label used to tag bytevectors representing the @code{scheme} component
of @uri{}s; it is derived from @class{nonempty-bytevector}.
@end deftp


@defop Constructor @aclass{scheme} constructor @var{obj}
Just return the given argument.  If tagged argument validation is
enabled: validate the argument with the predicate of @class{scheme}.
@end defop


@defop Maker @aclass{scheme} @aclass{scheme} (@meta{obj})
Filter the given argument using the label constructor.
@end defop


@defop Predicate @aclass{scheme} predicate @var{obj}
Return @true{} if @var{obj} is a non--empty bytevector in which every
octet can be interpreted as character in @ascii{} encoding and the
sequence of characters is valid for a @code{scheme} @uri{} component.
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable virtual field} @aclass{scheme} @aclass{ascii-bytevector} bytevector
A bytevector representing the @code{scheme} component in the format
requested by @rfc{} 3986.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{scheme} @aclass{ascii-string} string
A string representing the @code{scheme} component in the format
requested by @rfc{} 3986.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{scheme} put-bytevector (@var{port} @aclass{binary-output-port})
Write to @var{port} a bytevector representing the @code{scheme}
component in the format requested by @rfc{} 3986.
@end defmethod

@c page
@node net addresses uri userinfo
@subsubsection @uri{} userinfo objects


The following bindings are exported by the @library{nausicaa net
addresses uri} library.


@deftp Label @aclass{userinfo}
Label used to tag bytevectors representing the @code{userinfo} component
of @uri{}s; it is derived from @class{bytevector}.
@end deftp


@defop Constructor @aclass{userinfo} constructor @var{obj}
Just return the given argument.  If tagged argument validation is
enabled: validate the argument with the predicate of @class{userinfo}.
@end defop


@defop Maker @aclass{userinfo} @aclass{userinfo} (@var{obj})
Filter the given argument using the label constructor.
@end defop


@defop Predicate @aclass{userinfo} predicate @var{obj}
Return @true{} if @var{obj} is a non--empty bytevector in which every
octet can be interpreted as character in @ascii{} encoding and the
sequence of characters is valid for a @code{userinfo} @uri{} component.
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable virtual field} @aclass{userinfo} @aclass{boolean} specified?
According to @rfc{} 3986 the @code{userinfo} component of @uri{}s is can
be empty.  This field is @true{} if the bytevector has non--zero length,
@false{} otherwise.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{userinfo} @aclass{ascii-bytevector} bytevector
A bytevector representing the @code{userinfo} component in the format
requested by @rfc{} 3986.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{userinfo} @aclass{ascii-string} string
A string representing the @code{userinfo} component in the format
requested by @rfc{} 3986.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{userinfo} put-bytevector (@var{port} @aclass{binary-output-port})
Write to @var{port} a bytevector representing the @code{userinfo}
component in the format requested by @rfc{} 3986.
@end defmethod

@c page
@node net addresses uri host
@subsubsection @uri{} host objects


The following bindings are exported by the @library{nausicaa net
addresses uri} library.


@deftp Label @aclass{host}
Label used to tag bytevectors representing the @code{host} component of
@uri{}s; it is derived from @class{ip-address} defined by
@library{nausicaa net addresses ip}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable virtual field} @aclass{host} @aclass{ascii-bytevector} bytevector
A bytevector representing the @code{host} component in the format
requested by @rfc{} 3986.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{host} put-bytevector (@var{port} @aclass{binary-output-port})
Write to @var{port} a bytevector representing the @code{host} component
in the format requested by @rfc{} 3986.
@end defmethod

@c page
@node net addresses uri uri
@subsubsection Uniform Resource Identifiers objects


The following bindings are exported by the @library{nausicaa net addresses uri}
library.


@deftp Class @aclass{uri}
Represents a parsed @code{URI} component.
@end deftp


@defcv {Mutable field} @aclass{uri} scheme
The @code{scheme} component as a bytevector.  Remember that
@code{scheme} is mandatory and does not contain percent--encoded
characters.
@end defcv


@defcv {Mutable field} @aclass{uri} authority
The @code{authority} component as a bytevector, or false if there is no
@code{authority} component.  Percent--encoded characters are not decoded
in this field.
@end defcv


@defcv {Mutable field} @aclass{uri} userinfo
The @code{userinfo} component as a percent--decoded bytevector
@strong{not} containing the trailing at character, or false if there is
no @code{userinfo} component.
@end defcv


@defcv {Mutable field} @aclass{uri} host-type
A Scheme symbol among: @code{reg-name}, @code{ipv4-address},
@code{ipv6-address}, @code{ipvfuture}; when the host is empty: this
value is @code{reg-name}.
@end defcv


@defcv {Mutable field} @aclass{uri} host
Host data represented as the second return value from @func{parse-host}
and associated to the symbol above.  When @code{host-type} is
@code{reg-name}: the value is a percent--decoded bytevector.
@end defcv


@defcv {Mutable field} @aclass{uri} port
The @code{port} component as a bytevector, or false if no @code{port} is
present.  Remember that @code{port} does not contain percent--encoded
characters.
@end defcv


@defcv {Mutable field} @aclass{uri} path-type
A Scheme symbol among: @code{path-abempty}, @code{path-empty},
@code{path-rootless}, @code{path-absolute}; represents the type of the
@code{path} field.
@end defcv


@defcv {Mutable field} @aclass{uri} path
A possibly empty list holding percent--decoded bytevectors representing
the path segments.
@end defcv


@defcv {Mutable field} @aclass{uri} query
The @code{query} component as a percent--decoded bytevector @strong{not}
containing the leading question mark, or false if there is no
@code{query} component.
@end defcv


@defcv {Mutable field} @aclass{uri} fragment
The @code{fragment} component as a percent--decoded bytevector
@strong{not} containing the leading number--sign, or false if there is
no @code{fragment} component.
@end defcv


@defcv {Immutable virtual field} @aclass{uri} bytevector
A bytevector representing the whole @uri{}.
@end defcv


@defcv {Immutable virtual field} @aclass{uri} string
A string representing the whole @uri{}; it is built from the
@code{bytevector} field with the @func{to-string} function.
@end defcv


@defop Syntax @aclass{uri} make* @aclass{uri} @meta{source-bytevector}
Build and return a new @class{uri} instance holding fields from parsing
@var{source-bytevector}; it relies on parsing with @func{parse-uri}.
@end defop


@defop Syntax @aclass{uri} make @aclass{uri} @meta{clause} ...
@defopx {Auxiliary Syntax} @aclass{uri} source-bytevector @meta{expr}
Build and return a new @class{uri} instance holding fields from parsing
@var{expr}, which must be a bytevector; it relies on parsing with
@func{parse-uri}.
@end defop


@defop Syntax @aclass{uri} is-a? @var{expr} @aclass{uri}
Return true if @var{expr} evaluates to an instance of @class{uri}.
@end defop

@c page
@node net addresses uri ref
@subsubsection Relative references objects


The following bindings are exported by the @library{nausicaa net
addresses uri} library.


@deftp Class @aclass{relative-ref}
Represents a parsed @code{relative-ref} component.
@end deftp


@defcv {Mutable field} @aclass{relative-ref} authority
The @code{authority} component as a bytevector, or false if there is no
@code{authority} component.  Percent--encoded characters are not decoded
in this field.
@end defcv


@defcv {Mutable field} @aclass{relative-ref} userinfo
The @code{userinfo} component as a percent--decoded bytevector
@strong{not} containing the trailing at character, or false if there is
no @code{userinfo} component.
@end defcv


@defcv {Mutable field} @aclass{uri} host-type
A Scheme symbol among: @code{reg-name}, @code{ipv4-address},
@code{ipv6-address}, @code{ipvfuture}; when the host is empty: this
value is @code{reg-name}.
@end defcv


@defcv {Mutable field} @aclass{uri} host
Host data represented as the second return value from @func{parse-host}
and associated to the symbol above.  When @code{host-type} is
@code{reg-name}: the value is a percent--decoded bytevector.
@end defcv


@defcv {Mutable field} @aclass{relative-ref} port
The @code{port} component as a bytevector, or false if no @code{port} is
present.  Remember that @code{port} does not contain percent--encoded
characters.
@end defcv


@defcv {Mutable field} @aclass{relative-ref} path-type
A Scheme symbol among: @code{path-abempty}, @code{path-empty},
@code{path-noscheme}, @code{path-absolute}; represents the type of the
@code{path} field.
@end defcv


@defcv {Mutable field} @aclass{relative-ref} path
A possibly empty list holding percent--decoded bytevectors representing
the path segments.
@end defcv


@defcv {Mutable field} @aclass{relative-ref} query
The @code{query} component as a percent--decoded bytevector @strong{not}
containing the leading question mark, or false if there is no
@code{query} component.
@end defcv


@defcv {Mutable field} @aclass{relative-ref} fragment
The @code{fragment} component as a percent--decoded bytevector
@strong{not} containing the leading number--sign, or false if there is
no @code{fragment} component.
@end defcv


@defcv {Immutable virtual field} @aclass{relative-ref} bytevector
A bytevector representing the whole @uri{}.
@end defcv


@defcv {Immutable virtual field} @aclass{relative-ref} string
A string representing the whole @uri{}; it is built from the
@code{bytevector} field with the @func{to-string} function.
@end defcv


@defop Syntax @aclass{relative-ref} make* @aclass{relative-ref} @meta{source-bytevector}
Build and return a new @class{relative-ref} instance holding fields from
parsing @var{source-bytevector}; it relies on parsing with
@func{parse-uri}.
@end defop


@defop Syntax @aclass{relative-ref} make @aclass{relative-ref} @meta{clause} ...
@defopx {Auxiliary Syntax} @aclass{relative-ref} source-bytevector @meta{expr}
Build and return a new @class{relative-ref} instance holding fields from
parsing @var{expr}, which must be a bytevector; it relies on parsing
with @func{parse-uri}.
@end defop



@defop Syntax @aclass{relative-ref} is-a? @var{expr} @aclass{relative-ref}
Return true if @var{expr} evaluates to an instance of
@class{relative-ref}.
@end defop

@c end of file
