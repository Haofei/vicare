@node iteration thunks
@chapter Iteration thunks


@cindex Library @library{vicare containers iteration-thunks}
@cindex @library{vicare containers iteration-thunks}, library
@cindex Iteration thunks
@cindex Iterators, iteration thunks


The library @library{vicare containers iteration-thunks} implements some
iteration methods over collections of objects.  An @dfn{iteration thunk}
is a thunk that returns the next object from an iteration over a
compound object; when no more objects are available, it returns the
sentinel object (@vicareref{iklib sentinel, The sentinel object}).

@menu
* iteration thunks common::     Iterators for common objects.
* iteration thunks folding::    Folding over iterators.
* iteration thunks mapping::    Mapping iterators.
* iteration thunks searching::  Searching with iterators.
* iteration thunks filtering::  Filtering with iterators.
@end menu

@c page
@node iteration thunks common
@section Iterators for common objects


The following syntactic bindings are exported by the library
@library{vicare containers iteration-thunks}.


@defun make-list-iteration-thunk @var{ell}
Return an iteration thunk for the objects in the proper list @var{ell}.

@lisp
(define (xcons a b)
  (cons b a))

(iteration-thunk-fold xcons
  '()
  (make-list-iteration-thunk '(0 1 2 3 4)))
@result{} (4 3 2 1 0)
@end lisp
@end defun


@defun make-spine-iteration-thunk @var{ell}
Return an iteration thunk for the pairs in the proper list @var{ell}.

@lisp
(define (kons knil pair)
  (cons (car pair) knil))

(iteration-thunk-fold kons
  '()
  (make-list-iteration-thunk '(0 1 2 3 4)))
@result{} (4 3 2 1 0)
@end lisp
@end defun


@defun make-vector-iteration-thunk @var{vec}
Return an iteration thunk for the objects in the vector @var{vec}.

@lisp
(define (xcons a b)
  (cons b a))

(iteration-thunk-fold xcons
  '()
  (make-vector-iteration-thunk '#(0 1 2 3 4)))
@result{} (4 3 2 1 0)
@end lisp
@end defun


@defun make-string-iteration-thunk @var{str}
Return an iteration thunk for the characters in the string @var{str}.

@lisp
(define (xcons a b)
  (cons b a))

(iteration-thunk-fold xcons
  '()
  (make-string-iteration-thunk "01234"))
@result{} (#\4 #\3 #\2 #\1 #\0)
@end lisp
@end defun


@defun make-bytevector-u8-iteration-thunk @var{bv}
Return an iteration thunk for the octets in the bytevector @var{bv}.

@lisp
(define (xcons a b)
  (cons b a))

(iteration-thunk-fold xcons
  '()
  (make-bytevector-u8-iteration-thunk '#vu8(0 1 2 3 4)))
@result{} (4 3 2 1 0)
@end lisp
@end defun


@defun make-bytevector-s8-iteration-thunk @var{bv}
Return an iteration thunk for the bytes in the bytevector @var{bv}.

@lisp
(define (xcons a b)
  (cons b a))

(iteration-thunk-fold xcons
  '()
  (make-bytevector-s8-iteration-thunk '#vs8(0 -1 -2 -3 -4)))
@result{} (-4 -3 -2 -1 0)
@end lisp
@end defun

@c page
@node iteration thunks folding
@section Folding over iterators


The following syntactic bindings are exported by the library
@library{vicare containers iteration-thunks}.  The syntactic bindings
whose name is prefixed with @samp{$} are unsafe: they @strong{do not}
validate their arguments.


@defun iteration-thunk-fold @var{kons} @var{knil} @varo{iter} @var{iter} @dots{}
@defunx $iteration-thunk-fold @var{kons} @var{knil} @varo{iter} @var{iter} @dots{}
Fold operation over the objects from the iteration thunks @var{iter}.
When multiple iteration thunks are given: the iteration stops when one
of the thunks returns the sentinel.

@lisp
(define (xcons a b)
  (cons b a))

(iteration-thunk-fold xcons
  '()
  (make-list-iteration-thunk '(0 1 2 3 4)))
@result{} (4 3 2 1 0)

(receive-and-return (ell)
    '()
  (iteration-thunk-fold (lambda (knil item1 item2)
                          (set-cons! ell (+ knil item1 item2))
                          knil)
    0
    (make-list-iteration-thunk '(0  1  2  3  4))
    (make-list-iteration-thunk '(0 10 20 30 40))))
@result{} (44 33 22 11 0)
@end lisp
@end defun

@c page
@node iteration thunks mapping
@section Maping iterators


The following syntactic bindings are exported by the library
@library{vicare containers iteration-thunks}.  The syntactic bindings
whose name is prefixed with @samp{$} are unsafe: they @strong{do not}
validate their arguments.


@defun iteration-thunk-map @var{acceptor} @var{fun} @varo{iter} @var{iter} @dots{}
@defunx $iteration-thunk-map @var{acceptor} @var{fun} @varo{iter} @var{iter} @dots{}
Apply @func{fun} to the items from the iteration thunks @var{iter}.
When multiple iteration thunks are given: the iteration stops when one
of the thunks returns the sentinel.  The function @var{acceptor} is
applied to the the results of the applications.  The return value of the
mapping form is the return value of the last application of
@var{acceptor}; if the iteration thunk is empty: the return value is the
sentinel.

@lisp
(let ((ell '()))
  (iteration-thunk-map (lambda (rv)
                         (set-cons! ell rv)
                         ell)
    -
    (make-list-iteration-thunk '(0 1 2 3 4))))
@result{} (-4 -3 -2 -1 0)

(let ((ell '()))
  (iteration-thunk-map (lambda (rv)
                         (set-cons! ell rv)
                         ell)
    +
    (make-list-iteration-thunk '(0  1  2  3  4))
    (make-list-iteration-thunk '(0 10 20 30 40))))
@result{} (44 33 22 11 0)
@end lisp
@end defun


@defun iteration-thunk-for-each @var{fun} @varo{iter} @var{iter} @dots{}
@defunx $iteration-thunk-for-each @var{fun} @varo{iter} @var{iter} @dots{}
Apply @func{fun} to the items from the iteration thunks @var{iter} and
discard the return values.  When multiple iteration thunks are given:
the iteration stops when one of the thunks returns the sentinel.

@lisp
(receive-and-return (ell)
    '()
  (iteration-thunk-for-each
      (lambda (item)
        (set-cons! ell (- item)))
    (make-list-iteration-thunk '(0 1 2 3 4))))
@result{} (-4 -3 -2 -1 0)

(receive-and-return (ell)
    '()
  (iteration-thunk-for-each
      (lambda (item1 item2)
        (set-cons! ell (+ item1 item2)))
    (make-list-iteration-thunk '(0  1  2  3  4))
    (make-list-iteration-thunk '(0 10 20 30 40))))
@result{} (44 33 22 11 0)
@end lisp
@end defun

@c page
@node iteration thunks searching
@section Searching with iterators


The following syntactic bindings are exported by the library
@library{vicare containers iteration-thunks}.  The syntactic bindings
whose name is prefixed with @samp{$} are unsafe: they @strong{do not}
validate their arguments.


@defun iteration-thunk-for-all @var{fun} @varo{iter} @var{iter} @dots{}
@defunx $iteration-thunk-for-all @var{fun} @varo{iter} @var{iter} @dots{}
Apply @func{fun} to the items from the iteration thunks @var{iter}.
When multiple iteration thunks are given: the iteration stops when one
of the thunks returns the sentinel.

If all the applications of @var{fun} return true: the return value is
@true{}.  If an application of @var{fun} returns @false{}: the iteration
stops immediately and the return value is @false{}.

@lisp
(iteration-thunk-for-all
    even?
  (make-list-iteration-thunk '(2 4 5 6 8)))
@result{} #f

(iteration-thunk-for-all
    even?
  (make-list-iteration-thunk '(2 4 6 8)))
@result{} #t

(iteration-thunk-for-all
    =
  (make-list-iteration-thunk '(+1 +2 +3 +4))
  (make-list-iteration-thunk '(+1 +2 +3 +4))
  (make-list-iteration-thunk '(+1 +2 +3 +4)))
@result{} #t
@end lisp
@end defun


@defun iteration-thunk-exists @var{fun} @varo{iter} @var{iter} @dots{}
@defunx $iteration-thunk-exists @var{fun} @varo{iter} @var{iter} @dots{}
Apply @func{fun} to the items from the iteration thunks @var{iter}.
When multiple iteration thunks are given: the iteration stops when one
of the thunks returns the sentinel.

If all the applications of @var{fun} return @false{}: the return value
is @false{}.  If an application of @var{fun} returns a non--@false{}
value: the iteration stops immediately and the returned value is
returned.

@lisp
(iteration-thunk-exists
    even?
  (make-list-iteration-thunk '(1 3 5 7)))
@result{} #f

(iteration-thunk-exists
    even?
  (make-list-iteration-thunk '(1 3 4 5 7)))
@result{} #t

(iteration-thunk-exists
    =
  (make-list-iteration-thunk '(+1 +2 +3 +4))
  (make-list-iteration-thunk '(-1 -2 +3 -4))
  (make-list-iteration-thunk '( 0  0 +3  0)))a
@result{} #t
@end lisp
@end defun


@defun iteration-thunk-find @var{fun} @var{iter}
@defunx iteration-thunk-find @var{fun} @var{iter} @var{not-found-handler}
@defunx $iteration-thunk-find @var{fun} @var{iter} @var{not-found-handler}
Apply @func{fun} to the items from the iteration thunk @var{iter}:

@itemize
@item
If all the applications of @var{fun} return @false{} and
@var{not-found-handler} is not given: the return value is @false{}.

@item
If all the applications of @var{fun} return @false{} and
@var{not-found-handler} is given: @var{not-found-handler} must be a
thunk and the return value is the return value of the thunk;
@var{not-found-handler} is called in tail position.

@item
If an application of @var{fun} returns a non--@false{} value: the
iteration stops immediately and the return value is the item from the
iteration thunks.
@end itemize

@lisp
(iteration-thunk-find
    even?
  (make-list-iteration-thunk '(1 3 5 7)))
@result{} #f

(iteration-thunk-find
    even?
  (make-list-iteration-thunk '(1 3 5 7))
  (lambda () 'not-found))
@result{} not-found

(iteration-thunk-find
    even?
  (make-list-iteration-thunk '(1 3 4 5 7)))
@result{} 4
@end lisp
@end defun

@c page
@node iteration thunks filtering
@section Filtering with iterators


The following syntactic bindings are exported by the library
@library{vicare containers iteration-thunks}.  The syntactic bindings
whose name is prefixed with @samp{$} are unsafe: they @strong{do not}
validate their arguments.


@defun iteration-thunk-filter @var{acceptor} @var{pred} @var{iter}
@defunx $iteration-thunk-filter @var{acceptor} @var{pred} @var{iter}
Iterate over the items from @var{iter}, apply @var{pred} to them, apply
@var{acceptor} to the items for which @var{pred} returns true.  Return
unspecified values.

@lisp
(receive-and-return (ell)
    '()
  (iteration-thunk-filter
      (lambda (rv)
        (set-cons! ell rv))
      even?
    (make-list-iteration-thunk '(1 3 5 7))))
@result{} ()

(receive-and-return (ell)
    '()
  (iteration-thunk-filter
      (lambda (rv)
        (set-cons! ell rv))
      even?
    (make-list-iteration-thunk '(1 3 4 5 7 8))))
@result{} (8 4)
@end lisp
@end defun


@defun iteration-thunk-partition @var{match-acceptor} @var{no-match-acceptor} @var{pred} @var{iter}
@defunx $iteration-thunk-partition @var{match-acceptor} @var{no-match-acceptor} @var{pred} @var{iter}
Iterate over the items from @var{iter} and apply @var{pred} to them: if
the return value is true, apply @var{match-acceptor} to the item; if the
return value is @false{}, apply @var{no-match-acceptor} to the item.
Return unspecified values.

@lisp
(receive-and-return (match-ell no-match-ell)
    (values '() '())
  (iteration-thunk-partition
      (lambda (match-rv)
        (set-cons! match-ell match-rv))
      (lambda (no-match-rv)
        (set-cons! no-match-ell no-match-rv))
      even?
    (make-list-iteration-thunk '(1 3 5 7))))
@result{} () (7 5 3 1)

(receive-and-return (match-ell no-match-ell)
    (values '() '())
  (iteration-thunk-partition
      (lambda (match-rv)
        (set-cons! match-ell match-rv))
      (lambda (no-match-rv)
        (set-cons! no-match-ell no-match-rv))
      even?
    (make-list-iteration-thunk '(1 3 4 5 7 8))))
@result{} (8 4) (7 5 3 1)
@end lisp
@end defun

@c Local Variables:
@c mode: texinfo
@c TeX-master: "vicare-libs"
@c End:
