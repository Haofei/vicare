@node tags
@chapter Built--in objects type tags


The library @library{vicare expander tags} exports bindings to be used
in the typed Scheme language, @ref{typed, Experimental typed language}.

@menu
* tags syntaxes::               Convenience syntaxes.
@end menu

@c page
@node tags syntaxes
@section Convenience syntaxes


@menu
* tags syntaxes assertions::    Validating object types.
* tags syntaxes fields::        Accessing and mutating fields.
* tags syntaxes keys::          Special setter and getter syntaxes.
* tags syntaxes dispatch::      Dispatching methods.
@end menu

@c page
@node tags syntaxes assertions
@subsection Validating object types


The following bindings are exported by the library @library{vicare
expander tags}.


@deffn Syntax tag-predicate @meta{tag}
Given a tag identifier, expand into an expression evaluating to a
predicate function: a procedure accepting any object as single argument
and returning @true{} if the object is of type @meta{tag}, @false{}
otherwise.

In practice, this syntax is equivalent to:

@example
(is-a? <> @meta{tag})
@end example
@end deffn


@deffn Syntax tag-validator @meta{tag} @meta{expr}
@deffnx Syntax tag-validator @meta{tag} @meta{expr} @meta{input-form}
Expand into an expression that applies the predicate of @meta{tag} to
the result of evaluating @meta{expr}:

@itemize
@item
If the predicate returns @true{}: nothing happens and the expression
returns unspecified values.

@item
If the predicate returns @false{}: an exception is raised with compound
condition object of type @condition{expression-return-value-violation}.
@end itemize

The optional @meta{input-form} must be a symbolic expression
representing the form which originally generated this macro expansion;
it is used for descriptive error messages.
@end deffn


@defun tag-assert @meta{retvals-signature} @meta{expr}
@defunx tag-assert-and-return @meta{retvals-signature} @meta{expr}
Validate the tuple of values returned by @meta{expr} against the
signature specified by @meta{retvals-signature}.  If they match: nothing
happens.  If they do not match: an appropriate exception is raised.

@func{tag-assert} returns unspecified values.
@func{tag-assert-and-return} returns the return values of @meta{expr}.

When it is @strong{possible} to determine the tag signature of
@meta{expr} at expand--time and the signatures match: the macro use
expands to @meta{expr} itself, with no run--time checks.

When it is @strong{impossible} to determine the tag signature of
@meta{expr} at expand--time: the macro use expands to @meta{expr} and an
appropriate set of run--time validation forms that raise an exception if
a return value does not match its specified type.

@meta{retvals-signature} must be @false{}, null or a proper or improper
list of tag identifiers:

@itemize
@item
When @false{}: there is not signature specified and the macro use just
expands to @meta{expr}, with no validation checks.  Example:

@example
(tag-assert #f 123) @expansion{} 123
@end example

@item
When null: @meta{expr} is meant to return zero values.  Example:

@example
(define (print a)
  (display a)
  (newline)
  (values))

(tag-assert () (print 123))
@end example

@noindent
we have to remember that @code{(values)} is the only form that returns
zero values.

@item
When a proper list of @math{N} tag identifiers: @meta{expr} is meant to
return @math{N} values.  Example:

@example
(define (N)
  99)

(define (nums)
  (values 1 2 3))

(tag-assert (<fixnum>) (N))
(tag-assert (<fixnum> <fixnum> <fixnum>) (nums))
@end example

@item
When an improper list of @math{N} tag identifiers and a ``rest'' tag:
@meta{expr} is meant to return at least @math{N} values and any number
of additional values.  Example:

@example
(define (nums)
  (values 1 2 3))

(tag-assert (<fixnum> <fixnum> . <list>) (nums))
@end example
@end itemize
@end defun

@c page
@node tags syntaxes fields
@subsection Accessing and mutating fields


The following bindings are exported by the library @library{vicare
expander tags}.


@defun tag-accessor @meta{expr} @meta{field}
Expand to an expression that computes and returns the value of
@meta{field} from the result of evaluating @meta{expr}.

@meta{expr} must be an expression for which it is possible to determine
the retvals type signature at expand--time; such signature must be a
list holding a single tag identifier.

@meta{field} must be an identifier whose symbol name represents a field
of @meta{expr}.

@example
#!vicare
(import (vicare)
  (vicare expander tags))

(tag-accessor +123 even?)       @result{} #t

(define-struct alpha
  (a b c))
(define @{O alpha@}
  (make-alpha 1 2 3))
(tag-accessor O a)              @result{} 1
@end example
@end defun


@defun tag-mutator @meta{expr} @meta{field} @meta{new-value}
Expand to an expression that sets a new value for @meta{field} in the
result of evaluating @meta{expr}.

@meta{expr} must be an expression for which it is possible to determine
the retvals type signature at expand--time; such signature must be a
list holding a single tag identifier.

@meta{field} must be an identifier whose symbol name represents a field
of @meta{expr}.

@example
#!vicare
(import (vicare)
  (vicare expander tags))

(define-struct alpha
  (a b c))

(define @{O alpha@}
  (make-alpha 1 2 3))

(tag-mutator O a 11)
(tag-accessor O a)              @result{} 11
@end example
@end defun

@c page
@node tags syntaxes keys
@subsection Special setter and getter syntaxes


The following bindings are exported by the library @library{vicare
expander tags}.


@defun tag-getter @meta{expr} @meta{keys}
Expand to an expression that computes and returns the value of the
property selected by @meta{keys} from the result of evaluating
@meta{expr}.

@meta{expr} must be an expression for which it is possible to determine
the retvals type signature at expand--time; such signature must be a
list holding a single tag identifier.

@meta{keys} must be a list of lists holding expressions recognised by
the tag of @meta{expr}; the syntax of @meta{keys} must be:

@example
((@metao{key0} @metao{key} ...) (@metai{key1} @metai{key} ...) ...)
@end example

@example
#!vicare
(import (vicare)
  (vicare expander tags))

(tag-getter "ciao" [1])         @result{} #\i
(tag-getter "ciao" [3])         @result{} #\o
@end example
@end defun


@defun tag-setter @meta{expr} @meta{keys} @meta{new-value}
Expand to an expression that sets a new value for the property selected
by @meta{keys} in the result of evaluating @meta{expr}.

@meta{expr} must be an expression for which it is possible to determine
the retvals type signature at expand--time; such signature must be a
list holding a single tag identifier.

@meta{keys} must be a list of lists holding expressions recognised by
the tag of @meta{expr}; the syntax of @meta{keys} must be:

@example
((@metao{key0} @metao{key} ...) (@metai{key1} @metai{key} ...) ...)
@end example

@example
#!vicare
(import (vicare)
  (vicare expander tags))

(let ((@{S <string>@} (string-copy "ciao")))
  (tag-setter S [1] #\I)
  (tag-getter S [1]))
@result{} #\I)

(receive-and-return (@{S <string>@})
    (string-copy "ciao")
  (tag-setter S [3] #\O))
@result{} "ciaO"
@end example
@end defun

@c page
@node tags syntaxes dispatch
@subsection Dispatching methods


The following bindings are exported by the library @library{vicare
expander tags}.


@defun tag-dispatch @meta{expr} @meta{member} @meta{arg} @dots{}
Expand to an expression that applies to the result of evaluating
@meta{expr} the method @meta{member}.

@meta{expr} must be an expression for which it is possible to determine
the retvals type signature at expand--time; such signature must be a
list holding a single tag identifier.

@meta{member} must be an identifier whose symbol name represents the
name of a method or a field of @meta{expr}.

@example
#!vicare
(import (vicare)
  (vicare expander tags))

(tag-dispatch "ciao" = "hello")         @result{} #f
(tag-dispatch "ciao" = "ciao")          @result{} #t
(tag-dispatch "ciao" substring 1 3)     @result{} "ia"
(tag-dispatch "ciao" list)              @result{} (#\c #\i #\a #\o)

(define-struct alpha
  (a b c))

(define @{O alpha@}
  (make-alpha 1 2 3))

(tag-dispatch O a)                      @result{} 1
(tag-dispatch O b)                      @result{} 2
(tag-dispatch O c)                      @result{} 3
@end example
@end defun

@c end of file
