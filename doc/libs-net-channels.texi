@node net channels
@chapter Interprocess connection channels


@cindex Library @library{vicare net channels}
@cindex @library{vicare net channels}, library

The library @library{vicare net channels} implements facilities to let
software entities exchange messages in a controlled environment, through
Scheme input/output ports; the library expects the entities to take turn
in sending messages terminated with a known sequence of bytes.  A set of
interface--types is defined to allow other software units to implement a
compatible @api{}, possibly using other underlying devices.

The reference use is to let processes exchange messages through network
sockets.  The library is @strong{not} meant to be used in the wild,
where rogue or malicious entities may attempt to corrupt the other side.

The library is implemented with the typed language and it is meant to be
used by programs and libraries using the typed language.  This
documentation describes the library version @code{(0 4 2016 10 20)}.

@menu
* net channels ann::            Useful type annotations.
* net channels channels::       Channels definitions.
* net channels ifaces::         Interface-type definitions.
* net channels conditions::     Condition object types.
@end menu

@c page
@node net channels ann
@section Useful type annotations


The following syntactic bindings are exported by the library
@library{vicare net channels}.


@deftp Type @aclass{binary-terminators}
Type of message terminators for binary channels.  It is defined as
non--empty vector of non--empty bytevectors.
@end deftp


@deftp Type @aclass{textual-terminators}
Type of message terminators for textual channels.  It is defined as
non--empty vector of non--empty strings.
@end deftp

@c page
@node net channels channels
@section Interface-type definitions


@menu
* net channels channels channel::     Type @class{channel}.
* net channels channels bichannel::   Type @class{binary-input-channel}.
* net channels channels bochannel::   Type @class{binary-output-channel}.
* net channels channels biochannel::  Type @class{binary-input/output-channel}.
* net channels channels tichannel::   Type @class{textual-input-channel}.
* net channels channels tochannel::   Type @class{textual-output-channel}.
* net channels channels tiochannel::  Type @class{textual-input/output-channel}.
@end menu

@c page
@node net channels channels channel
@subsection The @class{channel} type


The following syntactic bindings are exported by the library
@library{vicare net channels}.


@deftp {Record Type} @aclass{channel}
Expose the basic configuration and inspection methods for all the
channels.
@end deftp


@deftypemethod @aclass{channel} @aclass{epoch-time} expiration-time @var{this}
@deftypemethodx @aclass{channel} @aclass{void} expiration-time @var{this} @{@var{time} @aclass{epoch-time}@}
Accessor and mutator for the message transfer expiration time.  The
argument @var{time} must be an instance of @class{epoch-time} (as
defined by @library{vicare}) representing the maximum time before which
the message transfer must be completed.

If the time limit is violated: an exception is raised at the first
attempted operation.
@end deftypemethod


@deftypemethod @aclass{channel} @aclass{positive-fixnum} maximum-message-size @var{this}
@deftypemethodx @aclass{channel} @aclass{positive-fixnum} maximum-message-size @var{this} @{@var{len} @aclass{positive-fixnum}@}
Accessor and mutator for the maximum message size.  The argument
@var{len} must be the maximum allowed length for a whole message,
measured in bytes for binary channels and in characters for textual
channels.
@end deftypemethod


@deftypemethod @aclass{channel} @aclass{non-negative-fixnum} current-message-size @var{this}
Accessor for the current message size: the number of bytes or characters
sent so far or received so far.  The returned value represents the
current message length, measured in bytes for binary channels and in
characters for textual channels.
@end deftypemethod


@deftypemethod @aclass{channel} @aclass{boolean} sending? @var{this}
Return @true{} if @var{this} is in the course of sending a message;
otherwise return @false{}.
@end deftypemethod


@deftypemethod @aclass{channel} @aclass{boolean} receiving? @var{this}
Return @true{} if @var{this} is in the course of receiving a message;
otherwise return @false{}.
@end deftypemethod


@deftypemethod @aclass{channel} @aclass{boolean} inactive? @var{this}
Return @true{} if @var{this} is neither in the course of sending nor
receiving a message; otherwise return @false{}.
@end deftypemethod


@deftypemethod @aclass{channel} @aclass{boolean} delivery-timeout-expired? @var{this}
Return @true{} if the delivery timeout has expired; otherwise return
@false{}.  We can use this method to query this status even without
attempting an input/output operation.
@end deftypemethod

@c page
@node net channels channels bichannel
@subsection The @class{binary-input-only-channel} type


The following syntactic bindings are exported by the library
@library{vicare net channels}.


@deftp {Record Type} @aclass{binary-input-only-channel}
@deftpx {Parent Type} @aclass{channel}
Expose the methods for all the binary input--only channels.
@end deftp


@deftypemethod @aclass{binary-input-only-channel} @aclass{binary-input-port} connect-in-port @var{this}
The input or input/output binary port used to receive messages from a
remote process.
@end deftypemethod


@deftypemethod @aclass{binary-input-only-channel} @aclass{positive-fixnum} maximum-message-portion-size @var{this}
@deftypemethodx @aclass{binary-input-only-channel} @aclass{void} maximum-message-portion-size @var{this} @aclass{positive-fixnum}
Accessor and mutator for the maximum number of bytes read at each
``receive message portion'' operation.
@end deftypemethod


@deftypemethod @aclass{binary-input-only-channel} @aclass{binary-terminators} message-terminators @var{this}
@deftypemethodx @aclass{binary-input-only-channel} @aclass{void} message-terminators @var{this} @{@var{terminators} @aclass{binary-terminators}@}
Accessor and mutator for the message termination markers.  The argument
@var{terminators} must represent the possible message terminators for
this channel; when a terminator is received @strong{at the end} of a
chunk of data, the message is considered terminated.
@end deftypemethod


@deftypemethod @aclass{binary-input-only-channel} @aclass{void} recv-begin! @var{this}
Configure the channel to receive a new message.  If @var{this} is not
inactive: an assertion is raised.
@end deftypemethod


@deftypemethod @aclass{binary-input-only-channel} {} recv-end!/rbl @var{this}
Terminate the action of receiving a message.  If @var{this} is not in
the course of receiving a message: an assertion is raised.

Return two values:

@enumerate
@item
A @class{positive-fixnum} representing the total length of the message
as number of bytes.

@item
A @code{(list-of @aclass{nebytevector})} representing the received data
as reverse buffer list (@acronym{RBL}), including the message
terminator.
@end enumerate

After this function is applied to a channel: the channel itself is reset
to inactive; so it is available to start receiving another message or to
send a message.
@end deftypemethod


@deftypemethod @aclass{binary-input-only-channel} @aclass{nebytevector} recv-end! @var{this}
Terminate the action of receiving a message.  If @var{this} is not in
the course of receiving a message: an assertion is raised.  If
@var{this} is not in ``message terminated'' status: an assertion is
raised.  Return a bytevector holding the full message, including the
message terminator.

After this function is applied to a channel: the channel itself is reset
to inactive; so it is available to start receiving another message or to
send a message.
@end deftypemethod


@deftypemethod @aclass{binary-input-only-channel} @aclass{void} recv-abort! @var{this}
Abort the current operation and reset the channel to inactive.  If
@var{this} is not in the course of receiving a message: an assertion is
raised.
@end deftypemethod


@deftypemethod @aclass{binary-input-only-channel} {(or @aclass{eof} @aclass{would-block} @aclass{boolean})} recv-message-portion! @var{this}
Receive a portion of message.  If @var{this} is not in the course of
receiving a message: an assertion is raised.

@itemize
@item
Return @false{} if a portion of message was read, and it does not
terminate with a message terminator; in this case we need to call this
function again to receive further message portions.

@item
Return @true{} if a portion of message was read, terminating with a
configured message terminator.  The channel is put in ``message
terminated'' status.

@item
Return @true{} if the channel already read a terminator in a previous
operation and is in ``message terminated'' status.

@item
Return the @eof{} object if @eof{} is read from the input device.

@item
Return the would--block object if a would--block object is read from the
input device.

@item
If the message delivery timeout is expired or expires while receiving
data: raise an exception.

@item
If the accumulated data exceeds the maximum message size: raise an
exception.
@end itemize
@end deftypemethod


@deftypemethod @aclass{binary-input-only-channel} {(or @aclass{eof} @aclass{bytevector})} recv-full-message @var{this}
Receive a full message.  When successful return a bytevector
representing the full message.  If @var{this} is not inactive: an
assertion is raised.  If the underlying device is closed before the
message is completed: return the @eof{} object.
@end deftypemethod

@c page
@node net channels channels bochannel
@subsection The @class{binary-output-only-channel} type


The following syntactic bindings are exported by the library
@library{vicare net channels}.


@deftp {Record Type} @aclass{binary-output-only-channel}
@deftpx {Parent Type} @aclass{channel}
Expose the methods for all the binary output--only channels.
@end deftp


@deftypemethod @aclass{binary-output-only-channel} @aclass{binary-output-port} connect-ou-port @var{this}
The output or input/output binary port used to send messages to a remote
process.
@end deftypemethod


@deftypemethod @aclass{binary-output-only-channel} @aclass{void} send-begin! @var{this}
Configure a channel to start sending a message.  If @var{this} is not
inactive: an assertion is raised.
@end deftypemethod


@deftypemethod @aclass{binary-output-only-channel} @aclass{non-negative-fixnum} send-end! @var{this}
Finish sending a message by flushing the underlying device and returning
the total number of bytes sent.  If @var{this} is not in the course of
sending a message: an assertion is raised.

After this function is applied to a channel: the channel itself is
configured as inactive; so it is available to start sending or receiving
a message.
@end deftypemethod


@deftypemethod @aclass{binary-output-only-channel} @aclass{void} flush @var{this}
Flush to the destination the data buffered in the underlying device.  If
@var{this} is not in the course of sending a message: an assertion is
raised.  If the maximum delivery time is exceeded: an exception is
raised.
@end deftypemethod


@deftypemethod @aclass{binary-output-only-channel} @aclass{void} send-abort! @var{this}
Abort the current operation and reset the channel to inactive.  If
@var{this} is not in the course of sending a message: an assertion is
raised.  If some data is in the output buffer of the underlying device:
it is left untouched.
@end deftypemethod


@deftypemethod @aclass{binary-output-only-channel} @aclass{void} send-message-portion! @var{this} @bracearg{portion, bytevector}
Send a portion of output message through the given channel.  If
@var{this} is not in the course of sending a message: an assertion is
raised.  The argument @var{portion} must be a bytevector representing
the message portion.  This function does not flush the underlying
device.

If the current message size exceeds the maximum configured size: an
exception is raised.  If the maximum delivery time is exceeded: an
exception is raised.
@end deftypemethod


@deftypemethod @aclass{binary-output-port} @aclass{non-negative-fixnum} send-full-message @var{this} @bracearg{portion, bytevector} @dots{}
Send a full message composed of the given @var{portion} arguments;
return the total number of bytes sent.  If @var{this} is not inactive:
an assertion is raised.

If the message size exceeds the maximum configured size: an exception is
raised.  If the maximum delivery time is exceeded: an exception is
raised.
@end deftypemethod

@c page
@node net channels channels biochannel
@subsection The @class{binary-input/output-channel} type


The following syntactic bindings are exported by the library
@library{vicare net channels}.


@deftp {Record Type} @aclass{binary-input/output-channel}
@deftpx {Parent Type} @aclass{channel}
Expose the methods for all the binary input/output channels.  These
channels implement all the methods of @class{binary-input-only-channel}
and all the methods of @class{binary-output-only-channel}.
@end deftp

@c page
@node net channels channels tichannel
@subsection The @class{textual-input-only-channel} type


The following syntactic bindings are exported by the library
@library{vicare net channels}.


@deftp {Record Type} @aclass{textual-input-only-channel}
@deftpx {Parent Type} @aclass{channel}
Expose the methods for all the textual input--only channels.
@end deftp


@deftypemethod @aclass{textual-input-only-channel} @aclass{textual-input-port} connect-in-port @var{this}
The input or input/output textual port used to receive messages from a
remote process.
@end deftypemethod


@deftypemethod @aclass{textual-input-only-channel} @aclass{positive-fixnum} maximum-message-portion-size @var{this}
@deftypemethodx @aclass{textual-input-only-channel} @aclass{void} maximum-message-portion-size @var{this} @aclass{positive-fixnum}
Accessor and mutator for the maximum number of characters read at each
``receive message portion'' operation.
@end deftypemethod


@deftypemethod @aclass{textual-input-only-channel} @aclass{textual-terminators} message-terminators @var{this}
@deftypemethodx @aclass{textual-input-only-channel} @aclass{void} message-terminators @var{this} @{@var{terminators} @aclass{textual-terminators}@}
Accessor and mutator for the message termination markers.  The argument
@var{terminators} must represent the possible message terminators for
this channel; when a terminator is received @strong{at the end} of a
chunk of data, the message is considered terminated.
@end deftypemethod


@deftypemethod @aclass{textual-input-only-channel} @aclass{void} recv-begin! @var{this}
Configure the channel to receive a new message.  If @var{this} is not
inactive: an assertion is raised.
@end deftypemethod


@deftypemethod @aclass{textual-input-only-channel} {} recv-end!/rbl @var{this}
Terminate the action of receiving a message.  If @var{this} is not in
the course of receiving a message: an assertion is raised.

Return two values:

@enumerate
@item
A @class{positive-fixnum} representing the total length of the message
as number of characters.

@item
A @code{(list-of @aclass{nestring})} representing the received data as
reverse buffer list (@acronym{RBL}), including the message terminator.
@end enumerate

After this function is applied to a channel: the channel itself is reset
to inactive; so it is available to start receiving another message or to
send a message.
@end deftypemethod


@deftypemethod @aclass{textual-input-only-channel} @aclass{nestring} recv-end! @var{this}
Terminate the action of receiving a message.  If @var{this} is not in
the course of receiving a message: an assertion is raised.  If
@var{this} is not in ``message terminated'' status: an assertion is
raised.  Return a string holding the full message, including the message
terminator.

After this function is applied to a channel: the channel itself is reset
to inactive; so it is available to start receiving another message or to
send a message.
@end deftypemethod


@deftypemethod @aclass{textual-input-only-channel} @aclass{void} recv-abort! @var{this}
Abort the current operation and reset the channel to inactive.  If
@var{this} is not in the course of receiving a message: an assertion is
raised.
@end deftypemethod


@deftypemethod @aclass{textual-input-only-channel} {(or @aclass{eof} @aclass{would-block} @aclass{boolean})} recv-message-portion! @var{this}
Receive a portion of message.  If @var{this} is not in the course of
receiving a message: an assertion is raised.

@itemize
@item
Return @false{} if a portion of message was read, and it does not
terminate with a message terminator; in this case we need to call this
function again to receive further message portions.

@item
Return @true{} if a portion of message was read, terminating with a
configured message terminator.  The channel is put in ``message
terminated'' status.

@item
Return @true{} if the channel already read a terminator in a previous
operation and is in ``message terminated'' status.

@item
Return the @eof{} object if @eof{} is read from the input device.

@item
Return the would--block object if a would--block object is read from the
input device.

@item
If the message delivery timeout is expired or expires while receiving
data: raise an exception.

@item
If the accumulated data exceeds the maximum message size: raise an
exception.
@end itemize
@end deftypemethod


@deftypemethod @aclass{textual-input-only-channel} {(or @aclass{eof} @aclass{string})} recv-full-message @var{this}
Receive a full message.  When successful return a string representing
the full message.  If @var{this} is not inactive: an assertion is
raised.  If the underlying device is closed before the message is
completed: return the @eof{} object.
@end deftypemethod

@c page
@node net channels channels tochannel
@subsection The @class{textual-output-only-channel} type


The following syntactic bindings are exported by the library
@library{vicare net channels}.


@deftp {Record Type} @aclass{textual-output-only-channel}
@deftpx {Parent Type} @aclass{channel}
Expose the methods for all the textual output--only channels.
@end deftp


@deftypemethod @aclass{binary-output-only-channel} @aclass{binary-output-port} connect-ou-port @var{this}
The output or input/output binary port used to send messages to a remote
process.
@end deftypemethod


@deftypemethod @aclass{textual-output-only-channel} @aclass{void} send-begin! @var{this}
Configure a channel to start sending a message.  If @var{this} is not
inactive: an assertion is raised.
@end deftypemethod


@deftypemethod @aclass{textual-output-only-channel} @aclass{non-negative-fixnum} send-end! @var{this}
Finish sending a message by flushing the underlying device and returning
the total number of characters sent.  If @var{this} is not in the course
of sending a message: an assertion is raised.

After this function is applied to a channel: the channel itself is
configured as inactive; so it is available to start sending or receiving
a message.
@end deftypemethod


@deftypemethod @aclass{textual-output-only-channel} @aclass{void} flush @var{this}
Flush to the destination the data buffered in the underlying device.  If
@var{this} is not in the course of sending a message: an assertion is
raised.  If the maximum delivery time is exceeded: an exception is
raised.
@end deftypemethod


@deftypemethod @aclass{textual-output-only-channel} @aclass{void} send-abort! @var{this}
Abort the current operation and reset the channel to inactive.  If
@var{this} is not in the course of sending a message: an assertion is
raised.  If some data is in the output buffer of the underlying device:
it is left untouched.
@end deftypemethod


@deftypemethod @aclass{textual-output-only-channel} @aclass{void} send-message-portion! @var{this} @bracearg{portion, string}
Send a portion of output message through the given channel.  If
@var{this} is not in the course of sending a message: an assertion is
raised.  The argument @var{portion} must be a string representing the
message portion.  This function does not flush the underlying device.

If the current message size exceeds the maximum configured size: an
exception is raised.  If the maximum delivery time is exceeded: an
exception is raised.
@end deftypemethod


@deftypemethod @aclass{textual-output-port} @aclass{non-negative-fixnum} send-full-message @var{this} @bracearg{portion, string} @dots{}
Send a full message composed of the given @var{portion} arguments;
return the total number of characters sent.  If @var{this} is not
inactive: an assertion is raised.

If the message size exceeds the maximum configured size: an exception is
raised.  If the maximum delivery time is exceeded: an exception is
raised.
@end deftypemethod

@c page
@node net channels channels tiochannel
@subsection The @class{textual-input/output-channel} type


The following syntactic bindings are exported by the library
@library{vicare net channels}.


@deftp {Record Type} @aclass{textual-input/output-channel}
@deftpx {Parent Type} @aclass{channel}
Expose the methods for all the textual input/output channels.  These
channels implement all the methods of @class{textual-input-only-channel}
and all the methods of @class{textual-output-only-channel}.
@end deftp

@c page
@node net channels ifaces
@section Interface-type definitions


The concrete object--types implemented by @library{vicare net channels}
implement the interfaces documented in this section.

@menu
* net channels ifaces channel::     Interface @iface{channel}.
* net channels ifaces bichannel::   Interface @iface{binary-input-channel}.
* net channels ifaces bochannel::   Interface @iface{binary-output-channel}.
* net channels ifaces tichannel::   Interface @iface{textual-input-channel}.
* net channels ifaces tochannel::   Interface @iface{textual-output-channel}.
@end menu

@c page
@node net channels ifaces channel
@subsection The @iface{channel} interface


The following syntactic bindings are exported by the library
@library{vicare net channels}.


@deftp {Interface Type} @aiface{channel}
Expose the basic configuration and inspection methods for all the
channels.
@end deftp


@deftypemethod @aiface{channel} @aclass{epoch-time} expiration-time @var{this}
@deftypemethodx @aiface{channel} @aclass{void} expiration-time @var{this} @{@var{time} @aclass{epoch-time}@}
Accessor and mutator for the message transfer expiration time.  The
argument @var{time} must be an instance of @class{epoch-time} (as
defined by @library{vicare}) representing the maximum time before which
the message transfer must be completed.

If the time limit is violated: an exception is raised at the first
attempted operation.
@end deftypemethod


@deftypemethod @aiface{channel} @aclass{positive-fixnum} maximum-message-size @var{this}
@deftypemethodx @aiface{channel} @aclass{positive-fixnum} maximum-message-size @var{this} @{@var{len} @aclass{positive-fixnum}@}
Accessor and mutator for the maximum message size.  The argument
@var{len} must be the maximum allowed length for a whole message,
measured in bytes for binary channels and in characters for textual
channels.
@end deftypemethod


@deftypemethod @aiface{channel} @aclass{non-negative-fixnum} current-message-size @var{this}
Accessor for the current message size: the number of bytes or characters
sent so far or received so far.  The returned value represents the
current message length, measured in bytes for binary channels and in
characters for textual channels.
@end deftypemethod


@deftypemethod @aiface{channel} @aclass{boolean} sending? @var{this}
Return @true{} if @var{this} is in the course of sending a message;
otherwise return @false{}.
@end deftypemethod


@deftypemethod @aiface{channel} @aclass{boolean} receiving? @var{this}
Return @true{} if @var{this} is in the course of receiving a message;
otherwise return @false{}.
@end deftypemethod


@deftypemethod @aiface{channel} @aclass{boolean} inactive? @var{this}
Return @true{} if @var{this} is neither in the course of sending nor
receiving a message; otherwise return @false{}.
@end deftypemethod


@deftypemethod @aiface{channel} @aclass{boolean} delivery-timeout-expired? @var{this}
Return @true{} if the delivery timeout has expired; otherwise return
@false{}.  We can use this method to query this status even without
attempting an input/output operation.
@end deftypemethod

@c page
@node net channels ifaces bichannel
@subsection The @iface{binary-input-channel} interface


The following syntactic bindings are exported by the library
@library{vicare net channels}.


@deftp {Interface Type} @aiface{binary-input-channel}
@deftpx {Parent Type} @aiface{channel}
Expose the methods for all the binary input channels.
@end deftp


@deftypemethod @aiface{binary-input-channel} @aclass{binary-terminators} message-terminators @var{this}
@deftypemethodx @aiface{binary-input-channel} @aclass{void} message-terminators @var{this} @{@var{terminators} @aclass{binary-terminators}@}
Accessor and mutator for the message termination markers.  The argument
@var{terminators} must represent the possible message terminators for
this channel; when a terminator is received @strong{at the end} of a
chunk of data, the message is considered terminated.
@end deftypemethod


@deftypemethod @aiface{binary-input-channel} @aclass{void} recv-begin! @var{this}
Configure the channel to receive a new message.  If @var{this} is not
inactive: an assertion is raised.
@end deftypemethod


@deftypemethod @aiface{binary-input-channel} {} recv-end!/rbl @var{this}
Terminate the action of receiving a message.  If @var{this} is not in
the course of receiving a message: an assertion is raised.

Return two values:

@enumerate
@item
A @class{positive-fixnum} representing the total length of the message
as number of bytes.

@item
A @code{(list-of @aclass{nebytevector})} representing the received data
as reverse buffer list (@acronym{RBL}), including the message
terminator.
@end enumerate

After this function is applied to a channel: the channel itself is reset
to inactive; so it is available to start receiving another message or to
send a message.
@end deftypemethod


@deftypemethod @aiface{binary-input-channel} @aclass{nebytevector} recv-end! @var{this}
Terminate the action of receiving a message.  If @var{this} is not in
the course of receiving a message: an assertion is raised.  If
@var{this} is not in ``message terminated'' status: an assertion is
raised.  Return a bytevector holding the full message, including the
message terminator.

After this function is applied to a channel: the channel itself is reset
to inactive; so it is available to start receiving another message or to
send a message.
@end deftypemethod


@deftypemethod @aiface{binary-input-channel} @aclass{void} recv-abort! @var{this}
Abort the current operation and reset the channel to inactive.  If
@var{this} is not in the course of receiving a message: an assertion is
raised.
@end deftypemethod


@deftypemethod @aiface{binary-input-channel} {(or @aclass{eof} @aclass{would-block} @aclass{boolean})} recv-message-portion! @var{this}
Receive a portion of message.  If @var{this} is not in the course of
receiving a message: an assertion is raised.

@itemize
@item
Return @false{} if a portion of message was read, and it does not
terminate with a message terminator; in this case we need to call this
function again to receive further message portions.

@item
Return @true{} if a portion of message was read, terminating with a
configured message terminator.  The channel is put in ``message
terminated'' status.

@item
Return @true{} if the channel already read a terminator in a previous
operation and is in ``message terminated'' status.

@item
Return the @eof{} object if @eof{} is read from the input device.

@item
Return the would--block object if a would--block object is read from the
input device.

@item
If the message delivery timeout is expired or expires while receiving
data: raise an exception.

@item
If the accumulated data exceeds the maximum message size: raise an
exception.
@end itemize
@end deftypemethod


@deftypemethod @aiface{binary-input-channel} {(or @aclass{eof} @aclass{bytevector})} recv-full-message @var{this}
Receive a full message.  When successful return a bytevector
representing the full message.  If @var{this} is not inactive: an
assertion is raised.  If the underlying device is closed before the
message is completed: return the @eof{} object.
@end deftypemethod

@c page
@node net channels ifaces bochannel
@subsection Interface @iface{binary-output-channel}


The following syntactic bindings are exported by the library
@library{vicare net channels}.


@deftp {Interface Type} @aiface{binary-output-channel}
@deftpx {Parent Type} @aiface{channel}
Expose the methods for all the binary output channels.
@end deftp


@deftypemethod @aiface{binary-output-channel} @aclass{void} send-begin! @var{this}
Configure a channel to start sending a message.  If @var{this} is not
inactive: an assertion is raised.
@end deftypemethod


@deftypemethod @aiface{binary-output-channel} @aclass{non-negative-fixnum} send-end! @var{this}
Finish sending a message by flushing the underlying device and returning
the total number of bytes sent.  If @var{this} is not in the course of
sending a message: an assertion is raised.

After this function is applied to a channel: the channel itself is
configured as inactive; so it is available to start sending or receiving
a message.
@end deftypemethod


@deftypemethod @aiface{binary-output-channel} @aclass{void} flush @var{this}
Flush to the destination the data buffered in the underlying device.  If
@var{this} is not in the course of sending a message: an assertion is
raised.  If the maximum delivery time is exceeded: an exception is
raised.
@end deftypemethod


@deftypemethod @aiface{binary-output-channel} @aclass{void} send-abort! @var{this}
Abort the current operation and reset the channel to inactive.  If
@var{this} is not in the course of sending a message: an assertion is
raised.  If some data is in the output buffer of the underlying device:
it is left untouched.
@end deftypemethod


@deftypemethod @aiface{binary-output-channel} @aclass{void} send-message-portion! @var{this} @bracearg{portion, bytevector}
Send a portion of output message through the given channel.  If
@var{this} is not in the course of sending a message: an assertion is
raised.  The argument @var{portion} must be a bytevector representing
the message portion.  This function does not flush the underlying
device.

If the current message size exceeds the maximum configured size: an
exception is raised.  If the maximum delivery time is exceeded: an
exception is raised.
@end deftypemethod


@deftypemethod @aiface{binary-output-port} @aclass{non-negative-fixnum} send-full-message @var{this} @bracearg{portion, bytevector} @dots{}
Send a full message composed of the given @var{portion} arguments;
return the total number of bytes sent.  If @var{this} is not inactive:
an assertion is raised.

If the message size exceeds the maximum configured size: an exception is
raised.  If the maximum delivery time is exceeded: an exception is
raised.
@end deftypemethod

@c page
@node net channels ifaces tichannel
@subsection Interface @iface{textual-input-channel}


The following syntactic bindings are exported by the library
@library{vicare net channels}.


@deftp {Interface Type} @aiface{textual-input-channel}
@deftpx {Parent Type} @aiface{channel}
Expose the methods for all the textual input channels.
@end deftp


@deftypemethod @aiface{textual-input-channel} @aclass{textual-terminators} message-terminators @var{this}
@deftypemethodx @aiface{textual-input-channel} @aclass{void} message-terminators @var{this} @{@var{terminators} @aclass{textual-terminators}@}
Accessor and mutator for the message termination markers.  The argument
@var{terminators} must represent the possible message terminators for
this channel; when a terminator is received @strong{at the end} of a
chunk of data, the message is considered terminated.
@end deftypemethod


@deftypemethod @aiface{textual-input-channel} @aclass{void} recv-begin! @var{this}
Configure the channel to receive a new message.  If @var{this} is not
inactive: an assertion is raised.
@end deftypemethod


@deftypemethod @aiface{textual-input-channel} {} recv-end!/rbl @var{this}
Terminate the action of receiving a message.  If @var{this} is not in
the course of receiving a message: an assertion is raised.

Return two values:

@enumerate
@item
A @class{positive-fixnum} representing the total length of the message
as number of characters.

@item
A @code{(list-of @aclass{nestring})} representing the received data as
reverse buffer list (@acronym{RBL}), including the message terminator.
@end enumerate

After this function is applied to a channel: the channel itself is reset
to inactive; so it is available to start receiving another message or to
send a message.
@end deftypemethod


@deftypemethod @aiface{textual-input-channel} @aclass{nestring} recv-end! @var{this}
Terminate the action of receiving a message.  If @var{this} is not in
the course of receiving a message: an assertion is raised.  If
@var{this} is not in ``message terminated'' status: an assertion is
raised.  Return a string holding the full message, including the message
terminator.

After this function is applied to a channel: the channel itself is reset
to inactive; so it is available to start receiving another message or to
send a message.
@end deftypemethod


@deftypemethod @aiface{textual-input-channel} @aclass{void} recv-abort! @var{this}
Abort the current operation and reset the channel to inactive.  If
@var{this} is not in the course of receiving a message: an assertion is
raised.
@end deftypemethod


@deftypemethod @aiface{textual-input-channel} {(or @aclass{eof} @aclass{would-block} @aclass{boolean})} recv-message-portion! @var{this}
Receive a portion of message.  If @var{this} is not in the course of
receiving a message: an assertion is raised.

@itemize
@item
Return @false{} if a portion of message was read, and it does not
terminate with a message terminator; in this case we need to call this
function again to receive further message portions.

@item
Return @true{} if a portion of message was read, terminating with a
configured message terminator.  The channel is put in ``message
terminated'' status.

@item
Return @true{} if the channel already read a terminator in a previous
operation and is in ``message terminated'' status.

@item
Return the @eof{} object if @eof{} is read from the input device.

@item
Return the would--block object if a would--block object is read from the
input device.

@item
If the message delivery timeout is expired or expires while receiving
data: raise an exception.

@item
If the accumulated data exceeds the maximum message size: raise an
exception.
@end itemize
@end deftypemethod


@deftypemethod @aiface{textual-input-channel} {(or @aclass{eof} @aclass{string})} recv-full-message @var{this}
Receive a full message.  When successful return a string representing
the full message.  If @var{this} is not inactive: an assertion is
raised.  If the underlying device is closed before the message is
completed: return the @eof{} object.
@end deftypemethod

@c page
@node net channels ifaces tochannel
@subsection Interface @iface{textual-output-channel}


The following syntactic bindings are exported by the library
@library{vicare net channels}.


@deftp {Interface Type} @aiface{textual-output-channel}
@deftpx {Parent Type} @aiface{channel}
Expose the methods for all the textual output channels.
@end deftp


@deftypemethod @aiface{textual-output-channel} @aclass{void} send-begin! @var{this}
Configure a channel to start sending a message.  If @var{this} is not
inactive: an assertion is raised.
@end deftypemethod


@deftypemethod @aiface{textual-output-channel} @aclass{non-negative-fixnum} send-end! @var{this}
Finish sending a message by flushing the underlying device and returning
the total number of characters sent.  If @var{this} is not in the course
of sending a message: an assertion is raised.

After this function is applied to a channel: the channel itself is
configured as inactive; so it is available to start sending or receiving
a message.
@end deftypemethod


@deftypemethod @aiface{textual-output-channel} @aclass{void} flush @var{this}
Flush to the destination the data buffered in the underlying device.  If
@var{this} is not in the course of sending a message: an assertion is
raised.  If the maximum delivery time is exceeded: an exception is
raised.
@end deftypemethod


@deftypemethod @aiface{textual-output-channel} @aclass{void} send-abort! @var{this}
Abort the current operation and reset the channel to inactive.  If
@var{this} is not in the course of sending a message: an assertion is
raised.  If some data is in the output buffer of the underlying device:
it is left untouched.
@end deftypemethod


@deftypemethod @aiface{textual-output-channel} @aclass{void} send-message-portion! @var{this} @bracearg{portion, string}
Send a portion of output message through the given channel.  If
@var{this} is not in the course of sending a message: an assertion is
raised.  The argument @var{portion} must be a string representing the
message portion.  This function does not flush the underlying device.

If the current message size exceeds the maximum configured size: an
exception is raised.  If the maximum delivery time is exceeded: an
exception is raised.
@end deftypemethod


@deftypemethod @aiface{textual-output-port} @aclass{non-negative-fixnum} send-full-message @var{this} @bracearg{portion, string} @dots{}
Send a full message composed of the given @var{portion} arguments;
return the total number of characters sent.  If @var{this} is not
inactive: an assertion is raised.

If the message size exceeds the maximum configured size: an exception is
raised.  If the maximum delivery time is exceeded: an exception is
raised.
@end deftypemethod

@c page
@node net channels conditions
@section Condition object types


Whenever an error condition happens: the functions of the library
@library{vicare net channels} react by raising non--continuable exceptions
whose raised objects are compound conditions of the following types.

The following syntactic bindings are exported by the library
@library{vicare net channels}.


@deftp {Condition Type} @acondition{channel}
Condition object containing an instance of @class{channel}; it is
derived from @condition{condition}.  It has the following fields:

@table @code
@item channel
The instance of @class{channel}.
@end table
@end deftp


@deftp {Condition Type} @acondition{delivery-timeout-expired}
Condition object used to tag exceptions as of type ``message delivery
timeout expired''; it is derived from @condition{error}.
@end deftp


@deftp {Condition Type} @acondition{maximum-message-size-exceeded}
Condition object used to tag exceptions as of type ``maximum message
size exceeded; it is derived from @condition{error}.
@end deftp

@c end of file
