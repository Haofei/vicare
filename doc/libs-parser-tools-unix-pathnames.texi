@node parser-tools unix-pathnames
@section Parsing Unix file system pathnames


@cindex @library{vicare parser-tools unix-pathnames}, library
@cindex Library @library{vicare parser-tools unix-pathnames}


The library @library{vicare parser-tools unix-pathnames} implements
facilities for parsing and manipulating Unix file system pathnames.
When importing it, it is suggested to prefix the bindings with
@samp{uxptn.} as in:

@example
(import (vicare)
  (prefix (vicare parser-tools unix-pathnames) uxptn.))
@end example


@menu
* parser-tools unix-pathnames grammar:: Grammar of Unix pathnames.
* parser-tools unix-pathnames errors::  Condition object types.
* parser-tools unix-pathnames preds::   Predicates for Unix pathnames.
* parser-tools unix-pathnames conv::    Converting Unix pathnames.
* parser-tools unix-pathnames parser::  Parsing Unix pathnames.
* parser-tools unix-pathnames manip::   Manipulating Unix pathnames.
@end menu

@c page
@node parser-tools unix-pathnames grammar
@subsection Grammar of Unix pathnames


A Unix pathname has the following grammar:

@example
pathname           = absolute-pathname
                   | relative-pathname

absolute-pathname  = "/" segment *( "/" segment )
relative-pathname  = segment-nz *( "/" segment )

segment            = *char
segment-nz         = 1*char

char               = [1, 255]
@end example

@noindent
where @math{[1, 255]} represents the octet interval between @math{1}
included and @math{255} included.  Notice that: an empty @code{pathname}
is invalid; an empty @code{segment} is valid and interpreted as
equivalent to a pathname segment representing the current directory
@samp{.}.

@c page
@node parser-tools unix-pathnames errors
@subsection Condition object types


The following bindings are exported by the library @library{vicare
parser-tools unix-pathnames}.

@c ------------------------------------------------------------

@subsubheading Parser errors


@deftp {Condition Type} &unix-pathname-parser-error
Signals an error while parsing a Unix pathname representation; it is
derived from @condition{error}.
@end deftp


@defun make-unix-pathname-parser-error
Build and return a new condition object of type
@condition{unix-pathname-parser-error}.
@end defun


@defun unix-pathname-parser-error? @var{obj}
Return @true{} if @var{obj} is a condition object of type
@condition{unix-pathname-parser-error}; otherwise return @false{}.
@end defun

@c ------------------------------------------------------------

@subsubheading Normalisation errors


@deftp {Condition Type} &unix-pathname-normalisation-error
Signals an error while normalising a Unix pathname representation; it is
derived from @condition{error}.
@end deftp


@defun make-unix-pathname-normalisation-error
Build and return a new condition object of type
@condition{unix-pathname-normalisation-error}.
@end defun


@defun unix-pathname-normalisation-error? @var{obj}
Return @true{} if @var{obj} is a condition object of type
@condition{unix-pathname-normalisation-error}; otherwise return
@false{}.
@end defun

@c ------------------------------------------------------------

@subsubheading Raising exceptions


@defun raise-unix-pathname-parser-error @var{who} @var{message} @var{irritant} @dots{}
Raise a non--continuable exception with compound condition object of
types: @condition{unix-pathname-parser-error}, @condition{who},
@condition{message}, @condition{irritants}.
@end defun


@defun raise-unix-pathname-normalisation-error @var{who} @var{message} @var{irritant} @dots{}
Raise a non--continuable exception with compound condition object of
types: @condition{unix-pathname-normalisation-error}, @condition{who},
@condition{message}, @condition{irritants}.
@end defun

@c page
@node parser-tools unix-pathnames preds
@subsection Predicates for Unix pathnames


The following bindings are exported by the library @library{vicare
parser-tools unix-pathnames}.


@defun pathname? @var{obj}
Return @true{} if @var{obj} is a string or bytevector acceptable as
representation of a Unix pathname; otherwise return @false{}.  If
@var{obj} is neither string nor bytevector: return @false{}.
@end defun


@defun segment? @var{obj}
Return @true{} if @var{obj} is a string or bytevector acceptable as
representation of a Unix pathname segment; otherwise return @false{}.
If @var{obj} is neither string nor bytevector: return @false{}.
@end defun


@defun list-of-segments? @var{obj}
Return @true{} if @var{obj} is a null or a proper list of strings and/or
bytevectors each acceptable as representation of a Unix pathname
segment; otherwise return @false{}.
@end defun

@c page
@node parser-tools unix-pathnames conv
@subsection Converting Unix pathnames


The following bindings are exported by the library @library{vicare
parser-tools unix-pathnames}.


@defun string/bytevector->pathname-bytevector @var{obj}
@defunx string/bytevector->pathname-bytevector @var{obj} @var{who}
Convert the string or bytevector @var{obj} to a bytevector
representation of a pathname; when successful return a bytevector, if an
error occurs raise an exception with compound condition object of types:
@condition{unix-pathname-parser-error}, @condition{who},
@condition{message}, @condition{irritants} using the optional @var{who}
as value for the condition object of type @condition{who}.

When @var{obj} is a string: only characters whose Unicode code point is
in the range @math{[1, 255]} are accepted, notice that zero is excluded;
in this case a new bytevector is returned.  An empty string is
equivalent to a pathname segment representing the current directory: the
return value is @code{#vu8(46)}.

When @var{obj} is a bytevector: all the octets are accepted, with the
exception of the octet zero; in this case @var{obj} itself is returned.
An empty bytevector is equivalent to a pathname segment representing the
current directory: the return value is @code{#vu8(46)}.
@end defun


@defun pathname-bytevector->string @var{obj}
@defunx pathname-bytevector->string @var{obj} @var{who}
Convert the bytevector pathname representation @var{obj} to a string
pathname representation; when successful return a string, if an error
occurs raise an exception with compound condition object of types:
@condition{unix-pathname-parser-error}, @condition{who},
@condition{message}, @condition{irritants} using the optional @var{who}
as value for the condition object of type @condition{who}.  An empty
bytevector is equivalent to a bytevector representing the current
directory: the return value is @code{"."}.

All the octets in the bytevector are considered valid, with the
exception of the octet zero.
@end defun

@c page
@node parser-tools unix-pathnames parser
@subsection Parsing Unix pathnames


The following bindings are exported by the library @library{vicare
parser-tools unix-pathnames}.


@defun parse-segment @var{port}
Accumulate bytes from @var{port} while they are valid for a
@code{segment} component; notice that an empty @code{segment} is valid.

If @eof{} or a slash character in @ascii{} coding is read: return a
possibly empty bytevector holding the bytes accumulated so far; the port
position is left pointing to the byte after the last accumulated one.

If an invalid byte is read: an exception is raised using
@func{raise-unix-pathname-parser-error}; the port position is rewind to
the one before this function call.
@end defun


@defun parse-segment-nz @var{port}
Accumulate bytes from @var{port} while they are valid for a
@code{segment-nz} component; notice that an empty @code{segment-nz} is
not valid.

If the first read operation returns @eof{} or a slash character in
@ascii{} coding: the port position is restored to the one before this
function call and the return value is false.

If, after at least one valid byte is read, @eof{} or a slash is read:
return a bytevector holding the bytes accumulated so far; the port
position is left pointing to the byte after the last accumulated one.

If an invalid byte is read: an exception is raised using
@func{raise-unix-pathname-parser-error}; the port position is rewind to
the one before this function call.
@end defun


@defun parse-slash-and-segment @var{port}
Attempt to read from @var{port} the sequence slash character plus
@code{segment} component; notice that an empty @code{segment} is valid.

If these components are successfully read: return a bytevector holding
the accumulated @code{segment} bytes; if the @code{segment} component is
empty: the returned bytevector is normalised to hold a single byte
representing a dot in @ascii{} coding.  The port position is left
pointing to the byte after the last accumulated byte from the
@code{segment}.

If @eof{} or a valid byte different from slash is read as first byte:
return false; the port position is rewind to the one before this
function call.

If an invalid byte is read: an exception is raised using
@func{raise-unix-pathname-parser-error}; the port position is rewind to
the one before this function call.
@end defun


@defun parse-pathname @var{port}
Parse from @var{port} an absolute or relative pathname until @eof{} is
found; return two values: a boolean, @true{} if the pathname is
absolute; a possibly empty list of bytevectors representing the
segments.

If an invalid octet is read or @eof{} is read before any octet: an
exception is raised with @func{raise-unix-pathname-parser-error}; the
port position is rewind to the one before this function call.
@end defun

@c page
@node parser-tools unix-pathnames manip
@subsection Manipulating Unix pathnames


The following bindings are exported by the library @library{vicare
parser-tools unix-pathnames}.


@defun normalise-pathname @var{absolute?} @var{segments}
Given a list of bytevectors representing Unix pathname segments:
normalise them, as much as possible, removing segments representing
single--dot and double--dot directory entries; if @var{absolute?}  is
true: normalise @var{segments} as an absolute pathname, else normalise
it as a relative pathname.  Return two values:

@enumerate
@item
A boolean, @true{} if some change was made from @var{segments} to the
second return value; this allows us to detect if a normalised list of
segments when serialised into a bytevector becomes different from the
original bytevector that generated @var{segments}.

@item
A new, possibly empty, list of bytevectors representing the
normalisation of @var{segments}.  Absolute pathname segments can hold
neither single--dot nor double--dot segments: if a double--dot segment
cannot annihilate its previous segment, it is just discarded.
@end enumerate
@end defun


@defun serialise-segments @var{absolute?} @var{segments}
Given a possibly empty list of bytevectors representing pathname
segments build and return a new bytevector representing the full
pathname; if @var{absolute?} is true: the first byte of the result
represents a slash in @ascii{} coding.

If @var{segments} is null and @var{absolute?} is true: the returned
value is a bytevector holding a single byte representing a slash in
@ascii{} coding.

If @var{segments} is null and @var{absolute?} is false: the returned
value is a bytevector holding a single byte representing a dot in
@ascii{} coding.
@end defun

@c end of file
