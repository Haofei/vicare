@node stacks
@chapter Stacks of objects


@cindex @library{vicare containers stacks}, library
@cindex Library @library{vicare containers stacks}


The library @library{vicare containers stacks} implements stacks holding
arbitrary Scheme objects and designed for efficient last--in/first--out
operations.

@menu
* stacks objects::              Stack objects.
* stacks inspection::           Inspecting stack objects.
* stacks access::               Stack accessors and mutators.
* stacks folding::              Folding over stacks.
* stacks mapping::              Mapping over stacks.
* stacks searching::            Searching in stacks.
* stacks filtering::            Filtering in stacks.
* stacks conversion::           Converting stacks to other objects.
* stacks iteration thunks::     Stack iteration thunks.
* stacks misc::                 Miscellaneous operations on stacks.
@end menu

@c page
@node stacks objects
@section Stack objects


Stacks are implemented as doubly--linked lists of vector objects; each
vector acts as buffer for contained objects; all the vectors have the
same length.

The following syntactic bindings are exported by the library
@library{vicare containers stacks}.


@deftp {@rnrs{6} Record Type} <stack>
@cindex @var{stack} argument
@cindex Argument @var{stack}
Record type representing a stack object.  The @objtype{<stack>} type is
non--generative and available for subtyping.  In this documentation
@objtype{<stack>} object arguments to functions are indicated as
@var{stack}.
@end deftp


@defun make-stack
@defunx make-stack @var{buffer-length}
Build and return a new @objtype{<stack>} object.  The optional argument
@var{buffer-length} must be a non--negative fixnum representing the
number of slots in the internal object buffers; when not given, it
defaults to @math{15}.
@end defun


@defun stack? @var{obj}
Return @true{} if @var{obj} is a record of type @objtype{<stack>};
otherwise return @false{}.
@end defun


@defun stack @var{obj} @dots{}
Build and return a @objtype{<stack>} object holding the given objects,
which are pushed on the stack right--to--left from the bottom side.  The
size of the internal buffers is set to the default.

@lisp
(define D
  (stack 0 1 2))

(stack-top D)         @result{} 0
@end lisp
@end defun

@c ------------------------------------------------------------

@subsubheading Object properties


@defun stack-putprop @var{stack} @var{key} @var{value}
@defunx $stack-putprop @var{stack} @var{key} @var{value}
Add a new property @var{key} to the property list of @var{stack};
@var{key} must be a symbol.  If @var{key} is already set: the old entry
is mutated to reference the new @var{value}.
@end defun


@defun stack-getprop @var{stack} @var{key}
@defunx $stack-getprop @var{stack} @var{key}
Return the value of the property @var{key} in the property list of
@var{stack}; if @var{key} is not set: return @false{}.  @var{key} must
be a symbol.
@end defun


@defun stack-remprop @var{stack} @var{key}
@defunx $stack-remprop @var{stack} @var{key}
Remove the property @var{key} from the property list of @var{stack}; if
@var{key} is not set: nothing happens.  @var{key} must be a symbol.
@end defun


@defun stack-property-list @var{stack}
@defunx $stack-property-list @var{stack}
Return a new association list representing the property list of
@var{stack}.  The order of the entries is the same as the property
creation order.
@end defun

@c ------------------------------------------------------------

@subsubheading Other operations


@defun stack-hash @var{stack}
@defunx $stack-hash @var{stack}
Return an exact integer to be used as hashtable key for @var{stack}.
Hashtables having a @objtype{<stack>} as key can be instantiated as
follows:

@example
(make-hashtable stack-hash eq?)
@end example
@end defun

@c page
@node stacks inspection
@section Inspecting stack objects


The following syntactic bindings are exported by the library
@library{vicare containers stacks}.  The syntactic bindings whose name
is prefixed with @code{$} are unsafe operations: they do @strong{not}
validate their arguments before accessing them.


@defun stack-empty? @var{stack}
@defunx $stack-empty? @var{stack}
Return @true{} if @var{stack} is empty; otherwise return @false{}.
@end defun


@defun stack-not-empty? @var{stack}
@defunx $stack-not-empty? @var{stack}
Return @true{} if @var{stack} is @strong{not} empty; otherwise return
@false{}.
@end defun


@defun stack-size? @var{stack}
@defunx $stack-size? @var{stack}
Return an exact integer representing the number of objects in @var{stack}.
@end defun

@c page
@node stacks access
@section Stack accessors and mutators


The following syntactic bindings are exported by the library
@library{vicare containers stacks}.  The syntactic bindings whose name
is prefixed with @code{$} are unsafe operations: they do @strong{not}
validate their arguments before accessing them.


@defun stack-top @var{stack}
@defunx $stack-top @var{stack}
Return the object at the top of the stack.  Raise an assertion violation
if @var{stack} is empty.
@end defun


@defun stack-push! @var{stack} @var{obj}
@defunx $stack-push! @var{stack} @var{obj}
Push @var{obj} on the top of the @var{stack}.
@end defun


@defun stack-pop! @var{stack}
@defunx $stack-pop! @var{stack}
Remove the object at the top of the stack and return it.  Raise an
assertion violation if @var{stack} is empty.
@end defun


@defun stack-purge! @var{stack}
@defunx $stack-purge! @var{stack}
Remove all the elements from @var{stack}.
@end defun

@c page
@node stacks folding
@section Folding over stacks


The following syntactic bindings are exported by the library
@library{vicare containers stacks}.  The syntactic bindings whose name
is prefixed with @code{$} are unsafe operations: they do @strong{not}
validate their arguments before accessing them.


@defun stack-fold-left @var{kons} @var{knil} @var{stack}
@defunx $stack-fold-left @var{kons} @var{knil} @var{stack}
Analogous to @func{fold-left} for lists.  Fold the procedure @var{kons}
over the objects from @var{stack}, starting from the top.

@lisp
(define D
  (stack 0 1 2 3 4 5))

(stack-fold-left (lambda (knil obj)
                   (cons obj knil))
  '() D)
@result{} (5 4 3 2 1 0)
@end lisp
@end defun


@defun stack-fold-right @var{kons} @var{knil} @var{stack}
@defunx $stack-fold-right @var{kons} @var{knil} @var{stack}
Analogous to @func{fold-right} for lists.  Fold the procedure @var{kons}
over the objects from @var{stack}, starting from the bottom.

@lisp
(define D
  (stack 0 1 2 3 4 5))

(stack-fold-right (lambda (obj knil)
                    (cons obj knil))
  '() D)
@result{} (0 1 2 3 4 5)
@end lisp
@end defun

@c page
@node stacks mapping
@section Mapping over stacks


The following syntactic bindings are exported by the library
@library{vicare containers stacks}.  The syntactic bindings whose name
is prefixed with @code{$} are unsafe operations: they do @strong{not}
validate their arguments before accessing them.


@defun stack-map-left @var{dst-stack} @var{fun} @var{src-stack}
@defunx $stack-map-left @var{dst-stack} @var{fun} @var{src-stack}
Iterate over all the objects in @var{src-stack}, starting from the top
side, apply @var{fun} to them, push the result of the application in the
bottom side of @var{dst-stack}.

@lisp
(stack->list
  (stack-map-left (stack) - (stack 0 1 2 3)))
@result{} (0 -1 -2 -3)
@end lisp

The @var{dst-stack} argument allows us to build the destination stack
with the desired configuration parameters.
@end defun


@defun stack-map-right @var{dst-stack} @var{fun} @var{src-stack}
@defunx $stack-map-right @var{dst-stack} @var{fun} @var{src-stack}
Iterate over all the objects in @var{src-stack}, starting from the
bottom side, apply @var{fun} to them, push the result of the application
in the top side of @var{dst-stack}.

@lisp
(stack->list
  (stack-map-right (stack) - (stack 0 1 2 3)))
@result{} (0 -1 -2 -3)
@end lisp

The @var{dst-stack} argument allows us to build the destination stack
with the desired configuration parameters.
@end defun


@defun stack-map @var{fun} @var{stack}
@defunx $stack-map @var{fun} @var{stack}
Aliases for @func{stack-map-left} and @func{$stack-map-left}.
@end defun

@c ------------------------------------------------------------------------

@defun stack-for-each-left @var{fun} @var{stack}
@defunx $stack-for-each-left @var{fun} @var{stack}
Iterate over all the objects in @var{stack}, starting from the top
side, and apply @var{fun} to them discarding the return value.
@end defun


@defun stack-for-each-right @var{fun} @var{stack}
@defunx $stack-for-each-right @var{fun} @var{stack}
Iterate over all the objects in @var{stack}, starting from the bottom
side, and apply @var{fun} to them discarding the return value.
@end defun


@defun stack-for-each @var{fun} @var{stack}
@defunx $stack-for-each @var{fun} @var{stack}
Aliases for @func{stack-for-each-left} and @func{$stack-for-each-left}.
@end defun

@c page
@node stacks searching
@section Searching in stacks


The following syntactic bindings are exported by the library
@library{vicare containers stacks}.  The syntactic bindings whose name
is prefixed with @code{$} are unsafe operations: they do @strong{not}
validate their arguments before accessing them.


@defun stack-for-all @var{fun} @var{stack}
@defunx $stack-for-all @var{fun} @var{stack}
Apply the procedure @var{fun} over the objects in @var{stack}, starting
from the top side; stop at the first application returning @false{}
and return @false{}.  If the iteration reaches the end of the stack: the
return value is the result of applying @var{fun} to the last object in
the stack.  If the stack is empty: the return value is @true{}.
@end defun


@defun stack-exists-left @var{fun} @var{stack}
@defunx $stack-exists-left @var{fun} @var{stack}
Apply the procedure @var{fun} over the objects in @var{stack}, starting
from the top side; stop at the first application returning true and
return the returned value.  If the stack is empty: the return value is
@false{}.
@end defun


@defun stack-exists-right @var{fun} @var{stack}
@defunx $stack-exists-right @var{fun} @var{stack}
Apply the procedure @var{fun} over the objects in @var{stack}, starting
from the bottom side; stop at the first application returning true and
return the returned value.  If the stack is empty: the return value is
@false{}.
@end defun


@defun stack-exists @var{fun} @var{stack}
@defunx $stack-exists @var{fun} @var{stack}
Aliases for @func{stack-exists-left} and @func{$stack-exists-left}.
@end defun


@defun stack-find-left @var{fun} @var{stack}
@defunx stack-find-left @var{fun} @var{stack} @var{not-found-rv}
@defunx $stack-find-left @var{fun} @var{stack} @var{not-found-rv}
Apply the procedure @var{fun} to the objects in @var{stack}, starting
from the top side: stop at the first true value and return the object
from @var{stack} that generated it.

When @var{not-found-rv} is not used: if all the applications return
@false{}, the return value is @false{}.

When @var{not-found-rv} is used: if all the applications return
@false{}, the return value is @var{not-found-rv}.

@lisp
(stack-find-left
    even?
  (stack 1 3 5 7)
  'not-found)
@result{} not-found

(stack-find-left
    even?
  (stack 1 3 5 7))
@result{} #f

(stack-find-left
    even?
  (stack 1 3 5 6 7)
  'not-found)
@result{} 6
@end lisp
@end defun


@defun stack-find-right @var{fun} @var{stack}
@defunx stack-find-right @var{fun} @var{stack} @var{not-found-rv}
@defunx $stack-find-right @var{fun} @var{stack} @var{not-found-rv}
Apply the procedure @var{fun} to the objects in @var{stack}, starting
from the bottom side: stop at the first true value and return the object
from @var{stack} that generated it.

When @var{not-found-rv} is not used: if all the applications return
@false{}, the return value is @false{}.

When @var{not-found-rv} is used: if all the applications return
@false{}, the return value is @var{not-found-rv}.
@end defun


@defun stack-find @var{fun} @var{stack}
@defunx stack-find @var{fun} @var{stack} @var{not-found-rv}
@defunx $stack-find @var{fun} @var{stack} @var{not-found-rv}
Aliases for @func{stack-find-left} and @func{$stack-find-left}.
@end defun

@c page
@node stacks filtering
@section Filtering in stacks


The following syntactic bindings are exported by the library
@library{vicare containers stacks}.  The syntactic bindings whose name
is prefixed with @code{$} are unsafe operations: they do @strong{not}
validate their arguments before accessing them.


@defun stack-filter @var{dst-stack} @var{pred} @var{src-stack}
@defunx $stack-filter @var{dst-stack} @var{pred} @var{src-stack}
Iterate over the objects in @var{src-stack} starting from the top
side, apply @var{pred} to them, push on the bottom of @var{dst-stack} the
ones for which @var{pred} returns true.  Return @var{dst-stack} itself.

The argument @var{dst-stack} allows us to build and configure a stack
with the needed parameters.
@end defun


@defun stack-partition @var{match-stack} @var{no-match-stack} @var{pred} @var{src-stack}
@defunx $stack-partition @var{match-stack} @var{no-match-stack} @var{pred} @var{src-stack}
Iterate over the objects in @var{src-stack}, starting from the top
side, and apply @var{pred} to them: if the return value is true, push
the object on the bottom of @var{match-stack}; if the return value is
@false{}, push the object on the bottom of @var{no-match-stack}.  Return
two values: @var{match-stack} and @var{no-match-stack}.

The arguments @var{match-stack} and @var{no-match-stack} allow us to
build and configure stacks with the needed parameters.
@end defun

@c page
@node stacks conversion
@section Converting stacks to other objects


The following syntactic bindings are exported by the library
@library{vicare containers stacks}.  The syntactic bindings whose name
is prefixed with @code{$} are unsafe operations: they do @strong{not}
validate their arguments before accessing them.


@defun stack->list @var{stack}
@defunx $stack->list @var{stack}
@defunx list->stack @var{list}
@defunx $list->stack @var{list}
Convert to and from a stack and a proper list.  Objects from the list
are pushed on the stack left--to--right from the bottom side.

@lisp
(define D
  (list->stack '(0 1 2)))

(stack-top   D)        @result{} 0
(stack->list D)        @result{} (0 1 2)
@end lisp
@end defun


@defun stack->vector @var{stack}
@defunx $stack->vector @var{stack}
@defunx vector->stack @var{vector}
@defunx $vector->stack @var{vector}
Convert to and from a stack and a vector.  Objects from the vector are
pushed on the stack left--to--right from the bottom side.

@lisp
(define D
  (vector->stack '#(0 1 2)))

(stack-top     D)       @result{} 0
(stack->vector D)       @result{} #(0 1 2)
@end lisp
@end defun

@c page
@node stacks iteration thunks
@section Stack iteration thunks


Iteration thunks are procedures accepting no arguments and returning an
item from a collection; when the iteration finishes: the return value is
the void object.  Iteration thunks can be used with the facilities of
the library @library{vicare containers iteration-thunks}
(@pxref{iteration thunks}).  The following syntactic bindings are
exported by the library @library{vicare containers stacks}.


@defun make-stack-iteration-thunk @var{stack}
Build and return a new iteration thunk popping the objects from
@var{stack}.

@lisp
(import (vicare)
  (vicare containers stacks)
  (vicare containers iteration-thunks))

(define (xcons a b)
  (cons b a))

(iteration-thunk-fold
    xcons
  '()
  (make-stack-iteration-thunks (stack)))
@result{} ()

(iteration-thunk-fold
    xcons
  '()
  (make-stack-iteration-thunks (stack 0 1 2 3 4 5)))
@result{} (5 4 3 2 1 0)
@end lisp
@end defun

@c page
@node stacks misc
@section Miscellaneous operations on stacks


The following syntactic bindings are exported by the library
@library{vicare containers stacks}.  The syntactic bindings whose name
is prefixed with @code{$} are unsafe operations: they do @strong{not}
validate their arguments before accessing them.


@defun stack-copy! @var{dst-stack} @var{src-stack}
@defunx $stack-copy! @var{dst-stack} @var{src-stack}
Iterate over all the objects in @var{src-stack}, starting from the top
side, and push them in the bottom side of @var{dst-stack}.  This is a
shallow copy: the very objects from the source stack are added to the
destination stack; if we need to duplicate the objects, we can use the
map operation.

The @var{dst-stack} argument allows us to build the destination stack
with the desired configuration parameters.
@end defun


@defun stack-reverse! @var{dst-stack} @var{src-stack}
@defunx $stack-reverse! @var{dst-stack} @var{src-stack}
Iterate over the objects in @var{src-stack}, starting from the top
side, and push them in the top side of @var{dst-stack}.  Return
@var{dst-stack}.

The @var{dst-stack} argument allows us to build the destination stack
with the desired configuration parameters.
@end defun

@c end of file
