@node libutils
@chapter Scheme libraries utility functions


The library @library{vicare libraries} exports bindings to deal with the
libraries infrastructure of @value{PRJNAME}; this library is integrated
in the boot image.

@menu
* libutils names::              Library name utilities.
* libutils refs::               Library reference utilities.
* libutils locating::           Locating libraries.
* libutils inspection::         Inspecting libraries.
@end menu

@c page
@node libutils names
@section Library name utilities


@menu
* libutils names pred::         Library name predicates.
* libutils names split::        Decomposing library names.
* libutils names compar::       Library names comparison.
@end menu

@c page
@node libutils names pred
@subsection Library name predicates


The following bindings are exported by the library @library{vicare
libraries}.


@defun library-version-numbers? @var{obj}
Return @true{} if @var{obj} is a list of library version numbers
according to @rnrs{6}, this includes @var{obj} being null.

@example
(library-version-numbers? '(1))         @result{} #t
(library-version-numbers? '(1 2 3))     @result{} #t
(library-version-numbers? '(1 -2 3))    @result{} #f
(library-version-numbers? '(1 A 3))     @result{} #f
@end example

@quotation
@strong{NOTE} According to @rnrs{6}: @var{obj} should be an exact
integer, which means a finxum or bignum for @value{PRJNAME}.  This
predicate accepts only fixnums because they are faster to handle and
``big enough''.
@end quotation
@end defun


@defun library-version-number? @var{obj}
Return @true{} if @var{obj} is a single version number according to
@rnrs{6}.
@end defun


@defun library-name? @var{sexp}
Return @true{} if @var{sexp} is a symbolic expressions compliant with
the definition of @meta{library-name} according to @rnrs{6}.

@example
(library-name? '())                             @result{} #f
(library-name? '(alpha))                        @result{} #t
(library-name? '(alpha beta))                   @result{} #t
(library-name? '(alpha beta gamma))             @result{} #t
(library-name? '(alpha beta gamma ()))          @result{} #t
(library-name? '(alpha beta gamma (1)))         @result{} #t
(library-name? '(alpha beta gamma (1 2 3)))     @result{} #t
(library-name? '(alpha 123 gamma))              @result{} #f
(library-name? '(alpha beta gamma (1 ciao)))    @result{} #f
@end example
@end defun

@c page
@node libutils names split
@subsection Decomposing library names


The following bindings are exported by the library @library{vicare
libraries}.


@defun library-name-decompose @var{obj}
Scan @var{obj} validating it as a @meta{library-name} as specified by
@rnrs{6}.  Return two values: the list of identifiers, the version
specification.  The version can be null.  If @var{obj} is not a valid
@meta{library-name}: return @false{} and @false{}.  The returned values
may share structure with @var{obj}.

@example
(library-name-decompose '(alpha))
@result{} (alpha) ()

(library-name-decompose '(alpha beta))
@result{} (alpha beta) ()

(library-name-decompose '(alpha beta gamma))
@result{} (alpha beta gamma) ()

(library-name-decompose '(alpha beta gamma ()))
@result{} (alpha beta gamma) ()

(library-name-decompose '(alpha beta gamma (1)))
@result{} (alpha beta gamma) (1)

(library-name-decompose '(alpha beta gamma (1 2 3)))
@result{} (alpha beta gamma) (1 2 3)

(library-name-decompose '(alpha beta gamma (1 A 3)))
@result{} #f #f

(library-name-decompose '(alpha 1 gamma (1 2 3)))
@result{} #f #f
@end example
@end defun


@defun library-name->identifiers @var{sexp}
Given a symbolic expressions compliant with the definition of
@meta{library-name} according to @rnrs{6}: return the list of
identifiers.  If @var{sexp} is not compliant return @false{}.

@example
(library-name->identifiers '(alpha))
@result{} (alpha)

(library-name->identifiers '(alpha beta))
@result{} (alpha beta)

(library-name->identifiers '(alpha beta gamma))
@result{} (alpha beta gamma)

(library-name->identifiers '(alpha beta gamma ()))
@result{} (alpha beta gamma)

(library-name->identifiers '(alpha beta gamma (1)))
@result{} (alpha beta gamma)

(library-name->identifiers '(alpha beta gamma (1 2 3)))
@result{} (alpha beta gamma)
@end example
@end defun


@defun library-name->version @var{sexp}
Given a symbolic expressions compliant with the definition of
@meta{library-name} according to @rnrs{6}: return the list of version
numbers.  If @var{sexp} is not compliant return @false{}.

@example
(library-name->version '(alpha))
@result{} ()

(library-name->version '(alpha beta))
@result{} ()

(library-name->version '(alpha beta gamma))
@result{} ()

(library-name->version '(alpha beta gamma ()))
@result{} ()

(library-name->version '(alpha beta gamma (1)))
@result{} (1)

(library-name->version '(alpha beta gamma (1 2 3)))
@result{} (1 2 3)
@end example
@end defun

@c page
@node libutils names compar
@subsection Library names comparison


The following functions can be used to sort library names according to
the version number:

@example
(list-sort library-name<? '((x y (1 2))
                            (x y (1 3))))
@result{} ((x y (1 2))
    (x y (1 3)))

(list-sort library-name<? '((x y (1 4))
                            (x y (1 2))
                            (x y (2 1))
                            (x y (1 3))))
@result{} ((x y (1 2))
    (x y (1 3))
    (x y (1 4))
    (x y (2 1)))
@end example

The following bindings are exported by the library @library{vicare
libraries}.


@defun library-name=? @vari{sexp} @varii{sexp}
Given two symbolic expressions compliant with the definition of
@meta{library-name} according to @rnrs{6}: return @true{} if they have
the same list of identifiers and the same version numbers.
@end defun


@defun library-name<? @vari{sexp} @varii{sexp}
Given two symbolic expressions compliant with the definition of
@meta{library-name} according to @rnrs{6}: return @true{} if they have
the same list of identifiers and the version of @vari{sexp} is less than
the version of @varii{sexp}.
@end defun


@defun library-name<=? @vari{sexp} @varii{sexp}
Given two symbolic expressions compliant with the definition of
@meta{library-name} according to @rnrs{6}: return @true{} if they have
the same list of identifiers and the version of @vari{sexp} is less than
or equal to the version of @varii{sexp}.
@end defun

@c ------------------------------------------------------------

@defun library-version=? @vari{vrs} @varii{vrs}
Given two lists of version numbers compliant with the definition of
@meta{library-name} according to @rnrs{6}: return @true{} if they have
the same numbers.

If one of the lists is longer and the elements up to the end of the
shortest are equal: the lists are ``equal'' if the tail of the longest
is made of zeros.

Examples:

@example
(1 2 3) == (1 2 3)
(1 2 3) != (1 2 3 4)
(1 2 3) == (1 2 3 0 0 0)
@end example
@end defun


@defun library-version<? @vari{vrs} @varii{vrs}
Given two lists of version numbers compliant with the definition of
@meta{library-name} according to @rnrs{6}: return @true{} if the version
number represented by @vari{vrs} is less than the version number
represented by @varii{vrs}.

Comparison of digits stops at the first digit for which @func{<} or
@func{>} return true.

If one of the lists is longer and the elements up to the end of the
shortest are equal: the lists are ``equal'' if the tail of the longest
is made of zeros.

Examples:

@example
(1 2 3) <  (4 2 3)
(1 2 3) <  (1 4 3)
(1 2 3) <  (1 2 4)
(1 2 3) <  (1 2 3 4)
(1 2 3) !< (1 2 3 0 0 0)
@end example
@end defun


@defun library-version<=? @vari{vrs} @varii{vrs}
Given two lists of version numbers compliant with the definition of
@meta{library-name} according to @rnrs{6}: return @true{} if the version
number represented by @vari{vrs} is less than or equal to the version
number represented by @varii{vrs}.

Comparison of digits stops at the first digit for which @func{<=}
returns false.

If one of the lists is longer and the elements up to the end of the
shortest are equal: the lists are ``equal'' if the tail of the longest
is made of zeros.

Examples:

@example
(1 2 3) <= (1 2 3)
(1 2 3) <= (4 2 3)
(1 2 3) <= (1 4 3)
(1 2 3) <= (1 2 4)
(1 2 3) <= (1 2 3 4)
(1 2 3 0) <= (1 2 3)
@end example
@end defun

@c page
@node libutils refs
@section Library reference utilities


@menu
* libutils refs pred::          Library reference predicates.
* libutils refs split::         Decomposing library references.
* libutils refs compar::        Library references comparison.
* libutils refs conform::       Conformity among library references
                                and names.
@end menu

@c page
@node libutils refs pred
@subsection Library reference predicates


The following bindings are exported by the library @library{vicare
libraries}.


@defun library-reference? @var{obj}
Return @true{} if @var{obj} is a valid library reference as specified by
@rnrs{6}.

@example
(library-reference? '())                        @result{} #f
(library-reference? '(alpha))                   @result{} #t
(library-reference? '(alpha beta gamma))        @result{} #t
(library-reference? '(alpha beta gamma ()))     @result{} #t
(library-reference? '(alpha beta gamma (1)))    @result{} #t
(library-reference?
    '(alpha beta (1
                  (<= 2)
                  (or 10 (and (>= 4)
                              (<= 2))))))
@result{} #t
@end example
@end defun


@defun library-version-reference? @var{obj}
Return @true{} if @var{obj} is a valid library version reference as
specified by @rnrs{6}.

@example
(library-version-reference? '())                @result{} #t
(library-version-reference? '(1))               @result{} #t
(library-version-reference? '(1 2 3))           @result{} #t

(library-version-reference? '(and))             @result{} #t
(library-version-reference? '(and (1)))         @result{} #t
(library-version-reference? '(and (1) (2)))     @result{} #t

(library-version-reference? '(or))              @result{} #t
(library-version-reference? '(or (1)))          @result{} #t
(library-version-reference? '(or (1) (2)))      @result{} #t

(library-version-reference? '(not))             @result{} #f
(library-version-reference? '(not (1)))         @result{} #t

(library-version-reference?
   '(1
     (<= 2)
     (or 10
         (and (<= 4)
              (>= 2)))))
@result{} #t
@end example
@end defun


@defun library-sub-version-reference? @var{obj}
Return @true{} if @var{obj} is a valid library sub--version reference as
specified by @rnrs{6}.
@end defun


@defun library-sub-version? @var{obj}
Return @true{} if @var{obj} is a @meta{sub-version} number according to
@rnrs{6}.

@quotation
@strong{NOTE} According to @rnrs{6}: @var{obj} should be an exact
non--negative integer, which means a non--negative finxum or bignum.
@value{PRJNAME} accepts only fixnums because they are faster to handle
and ``big enough''.
@end quotation
@end defun

@c page
@node libutils refs split
@subsection Decomposing library references


The following bindings are exported by the library @library{vicare
libraries}.


@defun library-reference-decompose @var{obj}
Interpret @var{obj} as a symbolic expression representing a library
reference as specified by @rnrs{6}.  Return two values: the list of
identifiers, the version reference.  If @var{obj} is not a valid library
reference: return @false{} and @false{}.
@end defun


@defun library-reference->identifiers @var{obj}
If @var{obj} is a valid library reference as specified by @rnrs{6},
return the list of identifiers; else return @false{}.
@end defun


@defun library-reference->version @var{obj}
If @var{obj} is a valid library reference as specified by @rnrs{6},
return the version reference; else return @false{}.
@end defun

@c page
@node libutils refs compar
@subsection Library references comparison


The following bindings are exported by the library @library{vicare
libraries}.


@defun library-reference-identifiers=? @vari{reference} @varii{reference}
Return @true{} if the arguments are library references having equal list
of identifiers; else return @false{}.
@end defun

@c page
@node libutils refs conform
@subsection Conformity among library references and names


The following bindings are exported by the library @library{vicare
libraries}.


@defun conforming-sub-version-and-sub-version-reference? @var{sub-version} @var{sub-version-reference}
Interpret @var{sub-version} as a sub--version number as specified by
@rnrs{6} and @var{sub-version-reference} as a sub--version reference as
specified by @rnrs{6}.  Return @true{} if the sub--version conforms to
the sub--version reference; else return @false{}; if the arguments are
invalid: raise an assertion violation.

@example
(conforming-sub-version-and-sub-version-reference?
    1 1)
@result{} #t

(conforming-sub-version-and-sub-version-reference?
    1 0)
@result{} #f

(conforming-sub-version-and-sub-version-reference?
    1 '(<= 1))
@result{} #t

(conforming-sub-version-and-sub-version-reference?
    2 '(<= 1))
@result{} #f

(conforming-sub-version-and-sub-version-reference?
    0 '(<= 1))
@result{} #t

(conforming-sub-version-and-sub-version-reference?
    1 '(>= 1))
@result{} #t

(conforming-sub-version-and-sub-version-reference?
    2 '(>= 1))
@result{} #t

(conforming-sub-version-and-sub-version-reference?
    0 '(>= 1))
@result{} #f

(conforming-sub-version-and-sub-version-reference?
    1 '(not 1))
@result{} #f

(conforming-sub-version-and-sub-version-reference?
    1 '(not 0))
@result{} #t

(conforming-sub-version-and-sub-version-reference?
    1 '(or 1 2))
@result{} #t

(conforming-sub-version-and-sub-version-reference?
    1 '(or 2 1))
@result{} #t

(conforming-sub-version-and-sub-version-reference?
    1 '(or 2 3))
@result{} #f

(conforming-sub-version-and-sub-version-reference?
    1 '(or 2 3 4))
@result{} #f

(conforming-sub-version-and-sub-version-reference?
    4 '(or 2 3 4))
@result{} #t

(conforming-sub-version-and-sub-version-reference?
    1 '(and (>= 0) (<= 2)))
@result{} #t

(conforming-sub-version-and-sub-version-reference?
    0 '(and (>= 0) (<= 2)))
@result{} #t

(conforming-sub-version-and-sub-version-reference?
    1 '(and (>= 0) (<= 2) (not 3)))
@result{} #t

(conforming-sub-version-and-sub-version-reference?
    1 '(and (>= 0) (<= 2) (not 1)))
@result{} #f


(conforming-sub-version-and-sub-version-reference?
    4 '(or (and (>= 0) (<= 2)) 4))
@result{} #t

(conforming-sub-version-and-sub-version-reference?
    3 '(or (and (>= 0) (<= 2)) 4))
@result{} #f
@end example
@end defun


@defun conforming-version-and-version-reference? @vari{version} @varii{version-reference}
Interpret @var{version} as a version symbolic expression as specified by
@rnrs{6} and @var{version-reference} as a version reference symbolic
expression as specified by @rnrs{6}.  Return @true{} if the version
conforms to the version reference; else return @false{}; if the
arguments are invalid: raise an assertion violation.

@example
(conforming-version-and-version-reference?
    '() '())
@result{} #t

(conforming-version-and-version-reference?
    '(1) '())
@result{} #t

(conforming-version-and-version-reference?
    '() '(1))
@result{} #f

(conforming-version-and-version-reference?
    '(1) '(1))
@result{} #t

(conforming-version-and-version-reference?
    '(1) '(0))
@result{} #f

(conforming-version-and-version-reference?
    '(1) '((<= 1)))
@result{} #t

(conforming-version-and-version-reference?
    '(2) '((<= 1)))
@result{} #f

(conforming-version-and-version-reference?
    '(0) '((<= 1)))
@result{} #t

(conforming-version-and-version-reference?
    '(1) '((>= 1)))
@result{} #t

(conforming-version-and-version-reference?
    '(2) '((>= 1)))
@result{} #t

(conforming-version-and-version-reference?
    '(0) '((>= 1)))
@result{} #f

(conforming-version-and-version-reference?
    '(1) '((not 1)))
@result{} #f

(conforming-version-and-version-reference?
    '(1) '((not 0)))
@result{} #t

(conforming-version-and-version-reference?
    '(1) '((or 1 2)))
@result{} #t

(conforming-version-and-version-reference?
    '(1) '((or 2 1)))
@result{} #t

(conforming-version-and-version-reference?
    '(1) '((or 2 3)))
@result{} #f

(conforming-version-and-version-reference?
    '(1) '((or 2 3 4)))
@result{} #f

(conforming-version-and-version-reference?
    '(4) '((or 2 3 4)))
@result{} #t

(conforming-version-and-version-reference?
    '(5) '((or 2 (or 3 (or 4 (or 5))))))
@result{} #t

(conforming-version-and-version-reference?
    '(1) '((and 1)))
@result{} #t

(conforming-version-and-version-reference?
    '(1) '((and 1 1)))
@result{} #t

(conforming-version-and-version-reference?
    '(1) '((and 1 1 1)))
@result{} #t

(conforming-version-and-version-reference?
    '(1) '((and 1 (and 1 (and 1 (and 1))))))
@result{} #t

(conforming-version-and-version-reference?
    '(1) '((and (>= 0) (<= 2))))
@result{} #t

(conforming-version-and-version-reference?
    '(0) '((and (>= 0) (<= 2))))
@result{} #t

(conforming-version-and-version-reference?
    '(2) '((and (>= 0) (<= 2))))
@result{} #t

(conforming-version-and-version-reference?
    '(1) '((and (>= 0) (<= 2) (not 3))))
@result{} #t

(conforming-version-and-version-reference?
    '(1) '((and (>= 0) (<= 2) (not 1))))
@result{} #f

(conforming-version-and-version-reference?
    '(1) '((or (and (>= 0) (<= 2)) 4)))
@result{} #t

(conforming-version-and-version-reference?
    '(4) '((or (and (>= 0) (<= 2)) 4)))
@result{} #t

(conforming-version-and-version-reference?
    '(3) '((or (and (>= 0) (<= 2)) 4)))
@result{} #f

(conforming-version-and-version-reference?
    '(1 2 3) '(1 2 3))
@result{} #t

(conforming-version-and-version-reference?
    '(1 2 3) '(1 2 4))
@result{} #f

(conforming-version-and-version-reference?
    '(1 2 0) '(1 2))
@result{} #t

(conforming-version-and-version-reference?
    '(1 2 1) '(1 2))
@result{} #t

(conforming-version-and-version-reference?
    '(1 2 3)
    '(1 (>= 1) (not 1)))
@result{} #t

(conforming-version-and-version-reference?
    '(1 2 3)
    '(1 (<= 1) (not 1)))
@result{} #f

(conforming-version-and-version-reference?
    '(1 2 3)
    '(or (1 (<= 1) (not 1)) (1 (>= 1) (not 1))))
@result{} #t

(conforming-version-and-version-reference?
    '(1 2 3) '(or (1 2 5) (1 2 10)))
@result{} #f

(conforming-version-and-version-reference?
    '(1 2 3)
    '(and (1 (>= 1) (not 1)) (1 2 (not 5))))
@result{} #t

(conforming-version-and-version-reference?
    '(1 2 3)
    '(and (1 (<= 1) (not 1)) (1 2 (not 5))))
@result{} #f)

(conforming-version-and-version-reference?
    '(1 2 3) '(not (1 5 4)))
@result{} #t

(conforming-version-and-version-reference?
    '(1 2 3) '(not (1 2 3)))
@result{} #f
@end example
@end defun


@defun conforming-library-name-and-library-reference? @var{name} @var{reference}
Interpret @var{name} as a library name symbolic expression as specified
by @rnrs{6} and @var{reference} as a library reference symbolic
expression as specified by @rnrs{6}.  Return @true{} if the name
conforms to the reference; else return @false{}; if the arguments are
invalid: raise an assertion violation.

@example
(conforming-library-name-and-library-reference?
    '(a (1)) '(a (1)))
@result{} #t

(conforming-library-name-and-library-reference?
    '(a (1)) '(a (0)))
@result{} #f

(conforming-library-name-and-library-reference?
    '(a b c (1)) '(a b c (1)))
@result{} #t

(conforming-library-name-and-library-reference?
    '(a b c (1)) '(a b c (0)))
@result{} #f

(conforming-library-name-and-library-reference?
    '(a b c (1)) '(a z c (1)))
@result{} #f
@end example
@end defun

@c page
@node libutils locating
@section Locating libraries


The library @library{vicare libraries} exposes some of the
infrastructure used by @value{PRJNAME} to locate and load Scheme
libraries; for details on the default algorithms @ref{using libraries,
@rnrs{6} libraries}.

@menu
* libutils locating paths::     Library search paths.
* libutils locating general::   Finding library locations.
* libutils locating files::     Finding library files.
@end menu

@c page
@node libutils locating paths
@subsection Library search paths


For more details about search paths @ref{using libraries paths, Library
search paths}.  The following bindings are exported by the library
@library{vicare libraries}.


@deffn Parameter library-path
Hold a list of strings representing directory pathnames.  It is used as
search path for source libraries.
@end deffn


@deffn Parameter library-extensions
Hold a list of strings representing source library file name extensions,
leading dot included.
@end deffn


@deffn Parameter fasl-search-path
Hold a list of strings representing directory pathnames.  It is used as
search path for binary libraries stored in @fasl{} files.
@end deffn


@deffn Parameter fasl-directory
Hold a string representing a directory pathname.  It is used as
directory prefix under which new binary library @fasl{} files are
created.
@end deffn


@defun fasl-path @var{libref}
Given a @rnrs{6} library reference: build and return a string
representing the pathname of the @fasl{} file in which the corresponding
binary library can be stored.  The directory of the pathname is the
current value of the parameter @func{fasl-directory}.
@end defun

@c page
@node libutils locating general
@subsection Finding library locations


The following bindings are exported by the library @library{vicare
libraries}.


@deffn Parameter current-library-locator
Hold a function used to locate a library from its @rnrs{6} library
reference; this parameter is usually initialised to one of the
functions:

@example
run-time-library-locator
compile-time-library-locator
source-library-locator
@end example

@noindent
by @value{PRJNAME}, but it can be set to a custom function selected by
the user.

The referenced locator function must accept as arguments:

@enumerate
@item
A @rnrs{6} library reference.

@item
A list of symbols representing options.
@end enumerate

@noindent
and it must return a thunk as single value.  When invoked, the returned
thunk must search for a library conforming to the given reference; if it
finds one, it must return two values:

@enumerate
@item
Either:

@itemize
@item
An input port from which the library can be read; if the port is binary:
a compiled library can be read from it; if the port is textual a source
library can be read from it.  It is responsibility of the caller to
close the returned port when no more needed.

@item
The boolean @true{}.  It means the library has already been loaded and
added to the internal collection of installed libraries.
@end itemize

@item
A thunk to be called to continue the search; it must have the same
@api{} of the thunk returned by the locator function.  This thunk allows
the caller to reject a library if it does not meet some additional
constraint; for example: if its version number does not conform to the
library reference.
@end enumerate

When no matching library is found: the returned thunk must return
@false{} and @false{}.
@end deffn


@defun run-time-library-locator @var{libref} @var{options}
Possible value for the parameter @func{current-library-locator}; this
function is meant to be used to search for libraries when running an
application.

Given a @rnrs{6} library reference and a list of search options: return
a thunk to be used to start the search for a matching library.

The returned thunk scans the search path for binary libraries in search
of a matching @fasl{} library file; if a compiled library is not found:
scan the search path for source libraries in search of a matching source
library file.

@var{options} must be a list of symbols; at present the supported
options are:

@example
move-on-when-open-fails
@end example

When successful the returned thunk returns two values:

@enumerate
@item
An input port from which the library can be read; if the port is binary:
a compiled library can be read from it; if the port is textual a source
library can be read from it.  It is responsibility of the caller to
close the returned port when no more needed.

@item
A thunk to be called to continue the search.  This thunk allows the
caller to reject a library if it does not meet some additional
constraint; for example: if its version number does not conform to
@var{libref}.
@end enumerate

When no matching library is found: the returned thunk returns @false{}
and @false{}.
@end defun


@defun compile-time-library-locator @var{libref} @var{options}
Possible value for the parameter @func{current-library-locator}; this
function is meant to be used to search for libraries to be compiled for
installation, for example by a package.

Given a @rnrs{6} library reference: return a thunk to be used to start
the search for a matching library.

The returned thunk does the following:

@enumerate
@item
Scan the next directory from the source libraries search path for a
source library whose name matches @var{libref}.

@item
If a matching source is found: look in the @func{fasl-directory}a for an
already compiled @fasl{} file.

@item
If the @fasl{} file does not exist or it is older than the source file:
accept the source file and prepare as next search the search for the
source file in the next directory from the search path.

@item
If the @fasl{} file exists and it is newer than the source file: accept
it and prepare as next search the acceptance of the source file.
@end enumerate

Remember that the @fasl{} file can be rejected if it has been compiled
by another boot image or it has the wrong library @uid{}.

@var{options} must be a list of symbols; at present the supported
options are:

@example
move-on-when-open-fails
@end example

When successful (a source or binary file is accepted) the returned thunk
returns two values:

@enumerate
@item
An input port from which the library can be read; if the port is binary:
a compiled library can be read from it; if the port is textual a source
library can be read from it.  It is responsibility of the caller to
close the returned port when no more needed.

@item
A thunk to be called to continue the search.  This thunk allows the
caller to reject a library if it does not meet some additional
constraint; for example: if its version number does not conform to
@var{libref}.
@end enumerate

When no matching library is found: the returned thunk returns @false{}
and @false{}.
@end defun


@defun source-library-locator @var{libref} @var{options}
Possible value for the parameter @func{current-library-locator}; this
function is meant to be used to search for source libraries first and
for binary libraries next.

Given a @rnrs{6} library reference and a list of search options: return
a thunk to be used to start the search for a matching library.

The returned thunk scans the search path for source libraries in search
of a matching source library file; if a source library is not found: it
scans the search path for binary libraries in search of a matching
@fasl{} library file.

@var{options} must be a list of symbols; at present the supported
options are:

@example
move-on-when-open-fails
@end example

When successful the returned thunk returns two values:

@enumerate
@item
An input port from which the library can be read; if the port is binary:
a compiled library can be read from it; if the port is textual a source
library can be read from it.  It is responsibility of the caller to
close the returned port when no more needed.

@item
A thunk to be called to continue the search.  This thunk allows the
caller to reject a library if it does not meet some additional
constraint; for example: if its version number does not conform to
@var{libref}.
@end enumerate

When no matching library is found: the returned thunk returns @false{}
and @false{}.
@end defun

@c page
@node libutils locating files
@subsection Finding library files


The following bindings are exported by the library @library{vicare
libraries}.


@deffn Parameter current-source-library-file-locator
Hold a function used to convert a @rnrs{6} library reference into the
corresponding source file pathname.

The referenced function must accept, as single value, a @rnrs{6} library
reference and it must return two values.  When successful: a string
representing the source file pathname; a thunk to be called to continue
the search from the next directory in the search path.  Otherwise it
must return @false{} and @false{}.
@end deffn


@deffn Parameter current-binary-library-file-locator
Hold a function used to convert a @rnrs{6} library reference into the
corresponding @fasl{} file pathname.

The referenced function must accept, as single value, a @rnrs{6} library
reference and it must return two values.  When successful: a string
representing the @fasl{} file pathname; a thunk to be called to continue
the search from the next directory in the search path.  Otherwise it
must return @false{} and @false{}.
@end deffn


@defun default-source-library-file-locator @var{libref}
Default value for the parameter
@func{current-source-library-file-locator}.  Given a @rnrs{6} library
reference: scan the source library search path for the corresponding
file.

Return two values.  When successful: a string representing the source
file pathname; a thunk to be called to continue the search from the next
directory in the search path.  Otherwise it must return @false{} and
@false{}.
@end defun


@defun default-binary-library-file-locator @var{libref}
Default value for the parameter
@func{current-binary-library-file-locator}.  Given a @rnrs{6} library
reference: scan the binary library search path for the corresponding
file.

Return two values.  When successful: a string representing the @fasl{}
file pathname; a thunk to be called to continue the search from the next
directory in the search path.  Otherwise it must return @false{} and
@false{}.
@end defun

@c page
@node libutils inspection
@section Inspecting libraries


The following bindings are exported by the library @library{vicare
libraries}.


@defun installed-libraries
@defunx installed-libraries @var{all?}
Return a list of LIBRARY structs being already installed.  If ALL?  is
true: return all the installed libraries, else return only the visible
ones.
@end defun


@defun find-library-by-name @var{libref}
Given a @rnrs{6} library reference: try to search and install the
corresponding library, if it is not already installed; when successful
return the corresponding @objtype{library} record, otherwise raise an
exception.
@end defun


@defun library? @var{obj}
Return @true{} if @var{obj} is a struct of type @objtype{library};
otherwise return @false{}.
@end defun


@defun library-uid @var{lib}
Accessor for structs of type @objtype{library}.
@end defun


@defun library-name @var{lib}
Accessor for structs of type @objtype{library}.
@end defun


@defun library-imp-lib* @var{lib}
Accessor for structs of type @objtype{library}.
@end defun


@defun library-vis-lib* @var{lib}
Accessor for structs of type @objtype{library}.
@end defun


@defun library-inv-lib* @var{lib}
Accessor for structs of type @objtype{library}.
@end defun


@defun library-export-subst @var{lib}
Accessor for structs of type @objtype{library}.
@end defun


@defun library-export-env @var{lib}
Accessor for structs of type @objtype{library}.
@end defun


@defun library-visit-state @var{lib}
Accessor for structs of type @objtype{library}.
@end defun


@defun library-invoke-state @var{lib}
Accessor for structs of type @objtype{library}.
@end defun


@defun library-visit-code @var{lib}
Accessor for structs of type @objtype{library}.
@end defun


@defun library-invoke-code @var{lib}
Accessor for structs of type @objtype{library}.
@end defun


@defun library-guard-code @var{lib}
Accessor for structs of type @objtype{library}.
@end defun


@defun library-guard-lib* @var{lib}
Accessor for structs of type @objtype{library}.
@end defun


@defun library-visible? @var{lib}
Accessor for structs of type @objtype{library}.
@end defun


@defun library-source-file-name @var{lib}
Accessor for structs of type @objtype{library}.
@end defun


@defun library-option* @var{lib}
Accessor for structs of type @objtype{library}.
@end defun

@c end of file
