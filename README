
                             Vicare Scheme
                             =============


Topics
------

  1. Introduction
  2. License
  4. Install
  5. Testing
  6. Policy
  7. Contributing
  A. Credits
  B. Bug reports
  C. Resources


1. Introduction
---------------

Scheme is  a statically scoped  and properly tail--recursive  dialect of
the  Lisp programming  language invented  by  Guy Lewis  Steele Jr.  and
Gerald Jay Sussman.  It was  designed to have an exceptionally clear and
simple semantics and few different ways to form expressions.

  The  "Revised^6 Report  on the  Algorithmic Language  Scheme"  gives a
defining description of the  programming language Scheme.  The report is
the work  of many  people in the  course of  many years; revision  6 was
edited by Michael  Sperber, R. Kent Dybvig, Matthew  Flatt and Anton Van
Straaten.

  Ikarus Scheme is an almost R6RS compliant implementation of the Scheme
programming language;  it is the creation of  Abdulaziz Ghuloum.  Vicare
Scheme is an experimental fork  of Ikarus Scheme; "Vicare" is pronounced
the etruscan way.


2. License
----------

Copyright (c) 2006-2010 Abdulaziz Ghuloum <aghuloum@cs.indiana.edu>
Modified by the Vicare contributors.

This program is free software:  you can redistribute it and/or modify it
under the  terms of the GNU  General Public License as  published by the
Free Software Foundation,  either version 3 of the  License, or (at your
option) any later version.

This program  is distributed  in the  hope that it  will be  useful, but
WITHOUT   ANY   WARRANTY;  without   even   the   implied  warranty   of
MERCHANTABILITY  or  FITNESS FOR  A  PARTICULAR  PURPOSE.   See the  GNU
General Public License for more details.

You should have received a copy  of the GNU General Public License along
with this program.  If not, see <http://www.gnu.org/licenses/>.


4. Install
----------

If we have checked out a  revision from the repository, you will have to
build the infrastructure running a script from the top source directory:

   $ cd /path/to/vicare
   $ sh BUILD-THE-INFRASTRUCTURE.sh

after that, basically we should do:

   $ mkdir "=build"
   $ cd "=build"
   $ ../configure
   $ make
   $ make install

  To test what a rule will do use the "-n" option; example:

    $ make install -n

  The "Makefile" supports the  "DESTDIR" environment variable to install
the files under a temporary location; example:

    $ make install DESTDIR=/tmp/marco/vicare


5. Testing
----------

The  original  tests  (from  the  Ikarus  distribution)  are  under  the
"scheme/tests" subdirectory and they are executed running:

   $ make ikarus-tests

  The new tests added in Vicare are in the "tests" subdirectory and they
are executed running:

   $ make tests

all the  test files under "tests"  are programs whose file  name has the
format "test-<name>.sps"  where <name> indicates the  tested feature; it
is possible to select a single test file by using the "file" variable on
the command line of "make"; for example:

   $ make tests file=equal-hash

will run the  "test-issue-001-equal-hash.sps" file.  The "file" variable
is used to expand a file name with wildcards as in "test-*$(file)*.sps".

  The  following command  will  run  all the  R6RS  compliance tests  by
Matthew Flatt:

   $ make test-r6rs

whose files are in the "tests/r6rs" subdirectory; in detail: each of the
following makefile rules will run a single set of R6RS compliance tests:

    test-r6rs-arithmetic-bitwise        test-r6rs-arithmetic-fixnums
    test-r6rs-arithmetic-flonums        test-r6rs-base
    test-r6rs-bytevectors               test-r6rs-conditions
    test-r6rs-contrib                   test-r6rs-control
    test-r6rs-enums                     test-r6rs-eval
    test-r6rs-exceptions                test-r6rs-hashtables
    test-r6rs-io-ports                  test-r6rs-io-simple
    test-r6rs-lists                     test-r6rs-mutable-pairs
    test-r6rs-mutable-strings           test-r6rs-programs
    test-r6rs-r5rs                      test-r6rs-reader
    test-r6rs-records-procedural        test-r6rs-records-syntactic
    test-r6rs-sorting                   test-r6rs-syntax-case
    test-r6rs-unicode

  The command:

   $ make check

will  run both  the R6RS  compliance tests  and the  Vicare  tests under
"tests".


6. Policy
---------

While the long term aim of the project is still not clearly established,
Vicare has the following short and midterm goals:

* Allow the installation  of both Ikarus and Vicare  without conflict in
  installed files and directories.

* Drop documentation in TeX format, replacing it with a Texinfo file.

* Document  the  internals  of   the  distribution,  both  the  building
  infrastructure and the source code.

* Fix bugs.

* Push compliance with R6RS, keeping a pragmatic eye at issues.

* Enhance the POSIX interface.

* Avoid the distribution of companion libraries: only code directly used
  in Vicare's internals is distribted.   It is always possible to fork a
  branch  and build a  "batteries included"  distribution as  a separate
  project.


7. Contributing
---------------

If you  feel the need to  contribute bug reports, bug  fixes, patches or
documentation to  Vicare Scheme, you  are welcome.  For bug  reports and
patches, you should adhere to the following rules:

* Vicare  is hosted  at  GitHub, so  first  of all  an  issue should  be
  registered at the development site:

                 <http://github.com/marcomaggi/vicare/>

  so  that a  new branch  can be  created in  the repository,  with name
  referring to the issue.

* The branch which aims at enhancing the original Ikarus distribution is
  named "ikarus", so a patch should be built by deriving the code from a
  checkout of such branch.

* Patches are accepted  only if they come with  documentation and tests;
  for  patches  enhancing compliance  with  R6RS,  documentation is  not
  needed.

* Patches  exposing the  POSIX interface  at  the Scheme  level will  be
  accepted, but, at some point in  the future, that code will be subject
  to modifications to enforce a policy of internal coherence.

* Big and revolutionary patches will be rejected.  It is always possible
  to  fork a  branch and  develop whatever  experimental reorganisation,
  rewriting or  enhancement (for example  support for other  CPUs).  Big
  changes can be merged later if they are successful.

  For  documentation  contributions,  you  can email  directly  Vicare's
maintainer  at <marco.maggi-ipsu@poste.it>  with or  without  opening an
issue about  undocumented features.  Documentation in  patches should be
added   to  the   Texinfo   file  "doc/vicare.texi",   but  pure   ASCII
documentation may be accepted (and formatted by the maintainer) if it is
not too long.

  Tests  for  patches must  be  added  under  the "tests"  subdirectory,
ideally by creating a new test file.


A. Credits
----------

The  original Ikarus  Scheme  code  is the  work  of Abdulaziz  Ghuloum.
Vicare Scheme  is a  fork driven by  Marco Maggi.  See  the CONTRIBUTORS
file for the list of contributors to Vicare Scheme.

  The R6RS  compatibility tests in  "./tests/r6rs" are by  Matthew Flatt
and are distributed under the GNU GPL version 2, or any later version.


B. Bug reports
--------------

Bug reports  are appreciated, register  them using the issue  tracker at
Vicare GitHub site.


C. Resources
------------

The latest version of this package can be downloaded from:

            <http://github.com/marcomaggi/vicare/downloads>

the home page of the Vicare project is at:

               <http://marcomaggi.github.com/vicare.html>

development takes place at:

                 <http://github.com/marcomaggi/vicare/>


### end of file
# Local Variables:
# mode: text
# fill-column: 72
# paragraph-start: "*"
# End:
